// Copyright Â© 2024 Kaleido, Inc.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { ethers, ignition, network } from "hardhat";
import { Signer } from "ethers";
import { expect } from "chai";
import qurrencyModule from "../../ignition/modules/test/qurrency";

describe("Test Qurrency verifier", function () {
  let qurrency: any;

  // other variables
  let deployer: Signer;

  before(async function () {
    if (network.name !== "hardhat") {
      // accommodate for longer block times on public networks
      this.timeout(120000);
    }
    let [d, a, b, c] = await ethers.getSigners();
    deployer = d;
    ({ qurrency } = await ignition.deploy(qurrencyModule));
    console.log(`Qurrency test contract deployed at ${qurrency.target}`);
  });

  it("test prepared inputs", async function () {
    const proofA = [
      "1114897742844016434512000812312829713592052215950334111121135787815485024316", "4169446919973432118184993196741996036281311701491986568448020754846211992339"];
    // convert to hex
    const hexProofA = proofA.map((proof: string) =>
      '0x' + BigInt(proof).toString(16)
    );
    const proofB = [
      ["11112657258470519663552581372367048822659721791534057277213559307962701124905", "21399742419029878939161726665040429309747362770890735049566978204310952583697"],
      ["1768623287647383269536838953935163188632453576419169426139892293203846354255", "3596473992103057606147216327159399887471716304854889669532641327932300013601"]
    ];
    // convert to hex
    const hexProofB = proofB.map((proof: string[]) =>
      proof.map((p: string) => '0x' + BigInt(p).toString(16))
    );
    const proofC = [
      "18999391426473279010227807251317538812404964215565673392441290078348258869475", "18836110529802234811699817154258109458877742883828674722876733702102605650521"];
    // convert to hex
    const hexProofC = proofC.map((proof: string) =>
      '0x' + BigInt(proof).toString(16)
    );
    const proof = {
      pA: hexProofA,
      pB: hexProofB,
      pC: hexProofC,
    };

    const publicSignals = [
      "4916568789054462339345395517486187550001486896420794416992141604333046241838",
      "7683382168893962423483325151057001983379601863693680076231927838779011195027",
      "3628998668308448533939038072283434328296235252564406122791319943277443625724",
      "12214439204446623853951951737421365282859453350078241676215709408338859961015",
      "2558586790091245279860898977421236374077229263521690922797599091479382491164",
      "2212626107783301968081292352678985524199772484925977083188694511451570937411",
      "10226111031149065265362111753964618040595274240021477393238791110165054190572",
      "13818561559281649114711028128866366773116054726228955897041869900934182029314",
      "2945072760371975341664355704435977071843753433166683143258160388545924632338",
      "8749680869905210954357029560001095780855646968375043892153937130938093306530",
      "13153730822798596244326480427119127113316174350539457450232497201627043218524",
      "2890589069729145203309473077096242907967672705414263641576290812914666507242",
      "339307764774283566222177295226110810021335900845832905184849699368322611861",
      "5622307108754583588730284301781445706631143108370469561238381058942659747374",
      "5050120953632823371397327996814730072923784803107718317237710802399352685072",
      "62725660740996476499250763588974798897299043865209328023912411967496991018",
      "2848113837071713550883067316577240179915462846890097102263823734075773744198",
      "988145317519848920364761851799672585083532163496692284746677686561529179315",
      "8035528784397019116956282245880229996317977893469589135799587709012308794605",
      "604429128589791580564821337461543494348088754496564005996491285186068942560",
      "46892890088080810497557634233757033761029227869220677332806924168567920871",
      "1361099146654732520647083963546278338754839010988295708757590511353832156117",
      "7064929966413449153510168475446535527606903030185931655387053656891875879266",
      "2392505231033525023073574683416424397905222421578498964818110327392528971743",
      "7870943635654957946598564124265796072728125857649575357340792814757119030485",
      "13284451921506991273133253427693730649984411942861857622897703569678075526153",
      "6862579527884728693164452994915049332626840095891488540083442132738828425264",
      "6763468316258762361429062746655234287490656791208319379776081070000429431139",
      "2202515253124250283005482290679012765576907074360636251616096054681760838242",
      "4288014855847245597302334703690790713036204783324995053460861659737660445953",
      "5524776963709571324960927056434148032116795282222582021524947016944353591729",
      "7795536084606864575762066359537867831094320467465084905354263098538577815848",
      "14069314476837168622988975221343099227336939494248974512305826268497192133127",
      "12439831493393574977830951573663899390971648605781940271812873449584589288986",
      "5957350174192581676259552720639423940436748125255773962389136592419789527200",
      "13246805484884750691545554916555954228102907362567762766243218950183113960114",
      "12076221078092024810048620492021810653984595330605886700511183384425766203740",
      "7516115819252201192829340819439325330784565471884839764255049616697159152800",
      "4016455445446451678086532700079710238818342127994931747836789783908013902200",
      "5050463971782471405173952892157921479725766023947459842081673744674615366114",
      "3659307850328971167004019109231092715298744909478046060369705918698110983406",
      "11644543733056398122957740147559140437056475417820334460149596455311464462403",
      "8691174127847376444881131241317870168293916029575667618786208866398528679853",
      "11141347014183275794602787381967678492509466168943423425558973031611220617350",
      "5103867540520202946470615599830347301334511286270025266409565303479788372629",
      "1790447650229468968719152760186626854715973786855071125814162615712337102532",
      "8525311550316554336081738279665130757197634210782829935650754215138775566886",
      "1714516736747441725850287514722560362377108834389271475307479164712262445599",
      "1670803547737358117855287440117574525449758895553661098701044931146352414184",
      "116702301454591940998797356770515570466214269"];
    // convert to hex
    const hexPublicSignals = publicSignals.map((signal: string) =>
      '0x' + BigInt(signal).toString(16)
    );
    const result = await qurrency.verifyProof(proof, hexPublicSignals);
    const receipt = await result.wait();
    console.log(`Qurrency test contract verifyProof tx hash: ${JSON.stringify(receipt, null, 2)}`);
  });
});
