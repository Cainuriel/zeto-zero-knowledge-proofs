// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Groth16Verifier_AnonNullifierQurrencyTransferBatch {
    // Scalar field size
    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    // Verification Key data
    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;

    
    uint256 constant IC0x = 18597632187712809450184764750757220425706374322845876803732527031761395984850;
    uint256 constant IC0y = 3762248126587673540850258250427237654050206108083189464202821935384906295999;
    
    uint256 constant IC1x = 17990812090388366935952751012525337794564038051112819717279132528582130744770;
    uint256 constant IC1y = 16004212710489001923436215654999502488006584448355544369362511932059415899172;
    
    uint256 constant IC2x = 1278584452610954741081495367907091142566691368084199715975500693479622003628;
    uint256 constant IC2y = 10299639257985727924262092814867180053336043618561794006711711761164132998672;
    
    uint256 constant IC3x = 15346332554964920575962796587296000984012405757861504501597509165492927873978;
    uint256 constant IC3y = 6325683320033036198747658648289376413066531210402402398697962524692275850113;
    
    uint256 constant IC4x = 12940932128555386032857483647832234326277725212954490469146909217162053223273;
    uint256 constant IC4y = 12255431866728148860857316171648940628359105902829739212996635343725411393801;
    
    uint256 constant IC5x = 10486956049839000576560534301606743005614550620156293629907015663386593700834;
    uint256 constant IC5y = 2149696394224299626831221536160708852610149130962718274495817864827157386631;
    
    uint256 constant IC6x = 19166572678248468161399521690076510624554613952734159485038629073811248650968;
    uint256 constant IC6y = 4547209246454363176482832184979621557074078711992735679982735369059659423508;
    
    uint256 constant IC7x = 8464169002503126036859002265557685966941341606937643592190044047373456500510;
    uint256 constant IC7y = 520181780607232437610676537444097220258034472044980954680239526740048474440;
    
    uint256 constant IC8x = 15470433567614916572049312069791932988362926977811429572685301511209946110492;
    uint256 constant IC8y = 3695998014337907981923548610253537607072326730255700351757018467979928090136;
    
    uint256 constant IC9x = 7787635369504123671318837218278058033764480044933778676460729616095903510230;
    uint256 constant IC9y = 16598523907177878688535886359610295576142293635173778516369477021964783773868;
    
    uint256 constant IC10x = 21035381463843424965603889034070147094700963287654612224923255654034452233104;
    uint256 constant IC10y = 15116616757004172254293641786344448468528660407522102086110259962133227326833;
    
    uint256 constant IC11x = 7081937969621828979392012494105515220538143260881352316130336785797401868266;
    uint256 constant IC11y = 6852513128826144192777305215489198406444946634773178663370207036439058904744;
    
    uint256 constant IC12x = 2562083679598827354123149898928313204220503807220567660846830529004019689127;
    uint256 constant IC12y = 15550427770789932320871291588980461237353722304671191747288169687139837763935;
    
    uint256 constant IC13x = 1138408437758837531281282516602564265617013710555960092972364966747188107521;
    uint256 constant IC13y = 15325493969657135523924559443397305745701502830396687497056723532152466460172;
    
    uint256 constant IC14x = 7592892152171769392351003858026602272472830957129647226170640129440722325757;
    uint256 constant IC14y = 1810544630670254653541036556419374381751848541681991565172137589335869305612;
    
    uint256 constant IC15x = 10933194883170461453833044861151481138127194043842931768371553545073493608807;
    uint256 constant IC15y = 14049353127628341508080427200609668426032411015659878879123220246498518033102;
    
    uint256 constant IC16x = 13512889312703163071019366960166737734152774187762650911062433863049254984819;
    uint256 constant IC16y = 16526554927519854346264068072709551919958777690853575294989257818171864834781;
    
    uint256 constant IC17x = 2632050841879815418510640179708775013660472074189959507358401831109358555187;
    uint256 constant IC17y = 16368925109393030792519376289238512913475806652109435444073448126186554333052;
    
    uint256 constant IC18x = 3123118038270311548510531910024907456820243692912483282777995956604654381940;
    uint256 constant IC18y = 15950427839788585407236808377337727448980667589147196454330426620007228377607;
    
    uint256 constant IC19x = 13029949427595929048215066235084277477827504733916522715895873262371488127533;
    uint256 constant IC19y = 4751109989464547173206434616420063398802597621141918811243093139920688945922;
    
    uint256 constant IC20x = 19767095941222224948792396744911606780872897460725524976241855519698887531730;
    uint256 constant IC20y = 13431259594171604434263341790272341751437646307838538503649644870045573010742;
    
    uint256 constant IC21x = 7773663609370780617372514186482027209012375620797662227485717072162798591589;
    uint256 constant IC21y = 3667338598308818105616751401119435131017386025768106674099846463531637326031;
    
    uint256 constant IC22x = 3685175420557347682314952487288482569918503061828735735544121419262544502984;
    uint256 constant IC22y = 19151345378231335310984712547497107343960160478166509636704215903866846458546;
    
    uint256 constant IC23x = 4165672227300539811139277142785921510857858305743166594196068048523353379341;
    uint256 constant IC23y = 13543362781706187139757803214120642821852918232952234625208134692246820603307;
    
    uint256 constant IC24x = 12834281273792238005871222632756238985303613349101376982217835812171327405219;
    uint256 constant IC24y = 17718583724244849224007294172837349265731501575422473798550674578804581647830;
    
    uint256 constant IC25x = 8358738807265943223857426477488729855147731277178992809771997007646311745500;
    uint256 constant IC25y = 4448327192885259363602470318237764802159737947769087955468008713677615603268;
    
    uint256 constant IC26x = 6836024070024505861845962503447309982573033434757729614947597488507502653191;
    uint256 constant IC26y = 17441548565137120724262008288056293283072819807319465661877981127050321528654;
    
    uint256 constant IC27x = 5801875995547414423145321423612952757466944844421392834362599953672871903704;
    uint256 constant IC27y = 21394088433872849145333081814887221280661996523920882424818118466442318527684;
    
    uint256 constant IC28x = 5222001172862834848398299314929371024283913242759601259715609030512792551060;
    uint256 constant IC28y = 14331617417785230769808487200041345762546478770497719945320391631766524746524;
    
    uint256 constant IC29x = 4699398434006215069640533578670996255443432246757406610932652341460604308983;
    uint256 constant IC29y = 20204414393606887154424262780211275993109489616578958048258046768101256933584;
    
    uint256 constant IC30x = 2170518133953878695005854705785313697775684064887971128955878344073137186927;
    uint256 constant IC30y = 21585104969457633955869512866677502459056780002764704902522923447335009373362;
    
    uint256 constant IC31x = 20605863487800374421774219922251988436358960238366974232971823656087495318292;
    uint256 constant IC31y = 21176733341027210052074105108272412257907124960578499762099934985748104082741;
    
    uint256 constant IC32x = 4019464725077106425345292086341620489564113235418674288360999279036304468018;
    uint256 constant IC32y = 12737617074577686238384153567458512884238201908750044804639332879398357194242;
    
    uint256 constant IC33x = 14993690074291265585121210309238067853884904616608354508640201620016035248248;
    uint256 constant IC33y = 6500860749738454485308181605913722043035564479459292584013307867323162783117;
    
    uint256 constant IC34x = 2379552814045345473959949959506050890378122545615506904811726381469223752455;
    uint256 constant IC34y = 5702979111813883749149184829202153517360885258654862254237598132592774621366;
    
    uint256 constant IC35x = 6715030438358824669383221870572328919351065661273600177137734218061604459884;
    uint256 constant IC35y = 12149017515733805608894110558037185319892677074247417732638372575247002671343;
    
    uint256 constant IC36x = 20657550018785876957305828439566458893571135129991696885908102341103546515348;
    uint256 constant IC36y = 19806984501783688078987615797423177000379694722846194251992190092784664408527;
    
    uint256 constant IC37x = 9823346732601146716704016524798815486232453216970121660832362764590538390918;
    uint256 constant IC37y = 6658055423307244081362144204810610495528388647444308878744059648851583624135;
    
    uint256 constant IC38x = 4144573806811610091281710491955900124984548868064230470746942123450636005675;
    uint256 constant IC38y = 2100026407175584713096856832503846217295420120871370887970618186198782754996;
    
    uint256 constant IC39x = 674299128687889185016756905166946306837527696396279427167147530420902267409;
    uint256 constant IC39y = 5141833596072699829875222298413670765044241516534603210019163106373910528946;
    
    uint256 constant IC40x = 20062408366493582997297490283336984840158802258884363509341574274518495045932;
    uint256 constant IC40y = 16743720372436744123024850695873396850437952303078910262324380221686071456202;
    
    uint256 constant IC41x = 8654911657974383992388046236260901850155724588938290997335828581524910884345;
    uint256 constant IC41y = 2428592395885701012780710911215406422596771258262633578756811898816844116986;
    
    uint256 constant IC42x = 744444918039305829292576388137668275841923228268369741951672217729865203073;
    uint256 constant IC42y = 16812288566186069706297148326562448139132041969084688840666781047363545699362;
    
    uint256 constant IC43x = 3455980436584046967032512722668992664614452086138081660319454988355664067669;
    uint256 constant IC43y = 2166587380281536395230296741336911035473595674701757194491041638076041337219;
    
    uint256 constant IC44x = 21072043599126348350191199302045946425298074975905593804599422996964711361413;
    uint256 constant IC44y = 17641545812141151034911893328121474466668161763552012255957540272377321651420;
    
    uint256 constant IC45x = 8346270847323707653014583963674249394623545539213037701837271494343007655462;
    uint256 constant IC45y = 5772886689787692053886606099136753191273395160692281156716497419657809480362;
    
    uint256 constant IC46x = 20381350838868425069399459199079752179383658775037334334202615207504028764685;
    uint256 constant IC46y = 15567932901877327343234102127917393867714839901106693313068141884648640898725;
    
    uint256 constant IC47x = 5898198761485953975239788349942527836863408888829014088173473075812648133185;
    uint256 constant IC47y = 11190707085569892879161773363652870064020944809358959758331948188831648853675;
    
    uint256 constant IC48x = 10434811832048603335331353301575832797311538439986290557281845571829444735836;
    uint256 constant IC48y = 20244550737664404694370984429432934509983505676338308141676931300169082634511;
    
    uint256 constant IC49x = 19948382258263798937005594053044063516206022767494315853236590566101462123579;
    uint256 constant IC49y = 2649469871013143822117904316290136089908879489888563482808966242295531576579;
    
    uint256 constant IC50x = 2327245829937254375289924466791876351352338378070854456277929386973478966792;
    uint256 constant IC50y = 6971284096320931830526804354399853003034316488035477353861927698487638347382;
    
    uint256 constant IC51x = 6613614243691916683954825826809089053381125924815989804254498230666416030400;
    uint256 constant IC51y = 21210949903328202820412654233482628522884834294257954319926223262472834412768;
    
    uint256 constant IC52x = 7455970179174276883502964387639535539863511521966245680244284820994701157956;
    uint256 constant IC52y = 922163179750075778842603352195112292570546944055183912729366098695336920438;
    
    uint256 constant IC53x = 710623391040162354796960869035359902915451923748979838333072747454269324700;
    uint256 constant IC53y = 1523710535441332727863403987853593563628519196907435453948321547941583161557;
    
    uint256 constant IC54x = 12540346842604985485123473389698302244647180897192497115916425940312493889656;
    uint256 constant IC54y = 10686217387621398948933326189365662271745743888394624534569477012978577976160;
    
    uint256 constant IC55x = 12075915098243938092831092961714400464874599686915158127343710512855519124637;
    uint256 constant IC55y = 15120971117281463617627893354982620965253346062967076981247046996347138099368;
    
    uint256 constant IC56x = 17602491884265694623184319996207984783365581342963117596586674906392508273087;
    uint256 constant IC56y = 6366008227274388268030184641911670164904034983597951086495721186922916961524;
    
    uint256 constant IC57x = 8487366766091210373261369844317887079238059633242319423005173660289025486441;
    uint256 constant IC57y = 2371150135656302046563609853733276730046537398011328096368266410082834675725;
    
    uint256 constant IC58x = 18969078006181634537510708976382035569362892771653745090462601100489563370868;
    uint256 constant IC58y = 7179882009877258371989185188817442210019826731632228347215707241371861270630;
    
    uint256 constant IC59x = 14718959804871890727070554357350781538801275752723077266258335609939932926924;
    uint256 constant IC59y = 12268834980228940877126734565054449214913444164319866152243415735199545598413;
    
    uint256 constant IC60x = 5105833881747703087334063886979123748622297775648286209617893482940979076014;
    uint256 constant IC60y = 21755886053561012543479191789585743880615271950761798021946029955466978771024;
    
    uint256 constant IC61x = 5284684044797902633621513605112026198613714838187032132393897579917930182563;
    uint256 constant IC61y = 11921099361178912192698188843033920744493870480170245572191585883046264839565;
    
    uint256 constant IC62x = 21277201635452856831248714630555612234092105788163047077757104017055251954418;
    uint256 constant IC62y = 19448970526573056990113382845297129285381947786982142933266793691934727185705;
    
    uint256 constant IC63x = 9325056212263742831149800237169824399503927723709101103480355138065963266988;
    uint256 constant IC63y = 8305745644867990980613232350722511102241166594808582353392602263383830954522;
    
    uint256 constant IC64x = 20682833657309718286947419594686701758612641804885796506855306769967870701432;
    uint256 constant IC64y = 7657417218671233687675221632568522022242410220977643992581154300412120567240;
    
    uint256 constant IC65x = 14259478505612495792651072692875865051267829869772088775426985241262933404432;
    uint256 constant IC65y = 6436889233977968362577344065996599264078777440076503072610446881155557413858;
    
    uint256 constant IC66x = 3594586876910020915273659239595804173521958127953240190219713352830415980770;
    uint256 constant IC66y = 20506674341900696696683059670333700014094873070072039533675737280532736907849;
    
    uint256 constant IC67x = 19683611101183903010852076285230012220241166507280933849290311566922335139648;
    uint256 constant IC67y = 9408866779693202699767047222427541444911694406132150421711791941872631662507;
    
    uint256 constant IC68x = 12132397915555236985114205519612439186152229457332639153392315810891467022355;
    uint256 constant IC68y = 8048778493954237298555009860485140969567551740774787294801796411868800896118;
    
    uint256 constant IC69x = 232617792319246482273171052755975078035434756723955546999837147174421463090;
    uint256 constant IC69y = 16927902998676591678103889869863497860468174766901621765962135911752568318993;
    
    uint256 constant IC70x = 12039128753549246865001493328682408314547537897351570422376589242443951984143;
    uint256 constant IC70y = 11252589061122113718911187307114326745355674914868587512443168038662329434346;
    
    uint256 constant IC71x = 246644596093139599068605720127658288763856719349140659088702665722661426974;
    uint256 constant IC71y = 11954101335432132568140249403370319399369843566348896884921256564986351455800;
    
    uint256 constant IC72x = 6598419165513079120369844106823611742796516751533386995697999475117871835428;
    uint256 constant IC72y = 17900586057139647974923085242460257760480698793055082383271138457589986595106;
    
    uint256 constant IC73x = 21164201211679036079942216302179596459620640987454835770877240428455553644680;
    uint256 constant IC73y = 6625715711078424164228331457578500010163885975847508186812753370830860509930;
    
    uint256 constant IC74x = 971358282259224345705614662573132058707098975641417939282310237153276314925;
    uint256 constant IC74y = 17147620352414941102226543762650302692060553983657193390103993193986085159111;
    
    uint256 constant IC75x = 13253465483981482749707339294239051928183115620648996051102539753483004376631;
    uint256 constant IC75y = 21578993898165563653226951340463108421058676560925778729082627833940962590209;
    
    uint256 constant IC76x = 12787190355147702843894730680527560594050598454529762966446374933502414114103;
    uint256 constant IC76y = 7769528253428097297214853734549164923388591613853672939354541572036058761581;
    
    uint256 constant IC77x = 2005592685516689096080476419713896775242028023479977028833986936703392918460;
    uint256 constant IC77y = 3857920779427135532489401510374092580072215656703806545914209616136055316828;
    
    uint256 constant IC78x = 3666130806345463864377374338962275383752026422500914125386446560183592444183;
    uint256 constant IC78y = 7682573627309498864037496966941317750957969471656349115040701078557676716056;
    
    uint256 constant IC79x = 20527335795501170956187406571039975445905762548323137599557517992628353092132;
    uint256 constant IC79y = 20491462970679302174049998342849250828705419511318467433333956209206635385104;
    
    uint256 constant IC80x = 5799966211202754877417078338751048880772385424594525877441410203852666624557;
    uint256 constant IC80y = 599107783478866027158413612106806477347900392024957094871133887507715071487;
    
    uint256 constant IC81x = 661091815538357834410195573245328194822552291753803114082155270381330420390;
    uint256 constant IC81y = 14962358373608749697486158022065654769398757446151499507647315418829934363971;
    
    uint256 constant IC82x = 15839542746959745694137514951526221742620486538483046588095727053035787321461;
    uint256 constant IC82y = 16827703245624948495943010508966482049814516974789935209739903949198625725143;
    
    uint256 constant IC83x = 4797978843798641485654061153943290682866169256641983940838349042267009422276;
    uint256 constant IC83y = 20576941704672002350713725561517454180788712145664440038625475290000163694671;
    
    uint256 constant IC84x = 19829163423198586847908779964919121414280299440741294997723604678726571237734;
    uint256 constant IC84y = 890216582636843022121830154355097945915497347133309366117356242415696835266;
    
    uint256 constant IC85x = 21211120611408279231441380604061722754077874772194737178651675376250893384090;
    uint256 constant IC85y = 10263560815592908692906139210867761437498219965229501295624305515515760149656;
    
    uint256 constant IC86x = 15390339449057980248326899431387088149096575329899988069394593850042973096944;
    uint256 constant IC86y = 16814827185967304799370958492294134192156331644461630537883147429168885434496;
    
    uint256 constant IC87x = 4288803735546831167524849493898899842444892534441431650272669096963739099544;
    uint256 constant IC87y = 6020167371469565425129651621442953268410031163753066604690457226959401151754;
    
    uint256 constant IC88x = 15566537116493469450171740943523517392878009899611764714340381903127374303859;
    uint256 constant IC88y = 1781877560357109333594377819838065685435197901848324674127173511435497216813;
    
    uint256 constant IC89x = 678663986533726565508753190826183072569219215092046352256889073895789990496;
    uint256 constant IC89y = 11209784087763697438665830167124635127037173720478988819557207396670133589816;
    
    uint256 constant IC90x = 20905771062285728461194764737976710485830054403516646703048114326990115721019;
    uint256 constant IC90y = 13147861383845167735504864355297674491311265624031615832744788619660575233392;
    
    uint256 constant IC91x = 18281327083072955349355709133086761368250782724837331697746770748311033446617;
    uint256 constant IC91y = 19801686462208930150919551999887247896774488711063577314903742717885652692683;
    
    uint256 constant IC92x = 17551516137540405955867226111148599446560557717945796492091213383895053141213;
    uint256 constant IC92y = 786033935488046961564352918376639034954587372125311324318266504284750462285;
    
    uint256 constant IC93x = 10369577997287538660376014395816350784940540423437905312309231974877218876931;
    uint256 constant IC93y = 3696913241383395863618241999726350305103561725927853402232817410551749076327;
    
    uint256 constant IC94x = 8006506866905229606502307952078707308927103511722554313517065688721459062657;
    uint256 constant IC94y = 16673564726548253462759783559734263541466651019044477517309196289523642537180;
    
    uint256 constant IC95x = 1808671900267525772803644870419315400328139633939132377808494585427582809562;
    uint256 constant IC95y = 13418279542957780772154796800659757064762831742299480445607425219579028538163;
    
    uint256 constant IC96x = 11071621951717304954600667181777301616785130254662707224145217348847872706709;
    uint256 constant IC96y = 9234765052784508565999181008407139219271698808463501747367629545234828707956;
    
    uint256 constant IC97x = 9568980160277089417631479578431737724930500411468618252665107601372578101875;
    uint256 constant IC97y = 9637201270591617045255606476118520208119601116152997889301055487769779341515;
    
    uint256 constant IC98x = 1442265157602106457558932959777779182176851681687663753833002097404195041447;
    uint256 constant IC98y = 14514016444035975007292994008194712021198883508714580643059583770289041920179;
    
    uint256 constant IC99x = 9501953574558946604519281691819101536806689959544375177221600411277276714343;
    uint256 constant IC99y = 18736010253545428363256532006668269722309177128577120054975848812620466326852;
    
    uint256 constant IC100x = 21793594911920587825307662538696198871419572563937457468446027171829574820033;
    uint256 constant IC100y = 6293507863013953906605924938163297364909615871867666916666430678355326877361;
    
    uint256 constant IC101x = 17589373785664175899660784689085582277661525321966384829923611795645526613394;
    uint256 constant IC101y = 17704106693065836415539634438058843121792673389226601406180335378066391165060;
    
    uint256 constant IC102x = 10739182498835201582208508167751748167025225320517574290710370577137918440512;
    uint256 constant IC102y = 2540700947787257964572101000832057669805233311820429315625659248035565259149;
    
    uint256 constant IC103x = 19900167551072071231114403150550678846313160443872886449847929077032259231608;
    uint256 constant IC103y = 20909702540669857335305267002379112765073626992732048201661489924698343002183;
    
    uint256 constant IC104x = 11365043059819171186278140334979268620313554888047299648506761042920449257067;
    uint256 constant IC104y = 6079702921521213534115428050923714537099488361296029295753243138714349317698;
    
    uint256 constant IC105x = 21482658666138216750350842921284655573454682781816028656926976095097515311381;
    uint256 constant IC105y = 14420325038212619285852703689243928159092729262889818485911478502094171418718;
    
    uint256 constant IC106x = 17883889439089128418221535402292197247225835443005458972345474452814320440720;
    uint256 constant IC106y = 10300481510666245211749496735823715395177209226709741809935779569140680724968;
    
    uint256 constant IC107x = 18711456604479969598880292350657386624730124393900621403682154110245764731802;
    uint256 constant IC107y = 9140719006420473018627039222625920908191331943025806970145642079918692467342;
    
    uint256 constant IC108x = 2049962176477813675528267989003315798697275253394372516116446404213185521419;
    uint256 constant IC108y = 20116310302594649310105247029136783326314928090188921660345166374512079868523;
    
    uint256 constant IC109x = 19630786719046883130040483140033893868138514295341767421662599512737979179386;
    uint256 constant IC109y = 3627802033559049807079306836160135830886014126549971455883327193955259715782;
    
    uint256 constant IC110x = 21542329291033570567348681730785756416596940322430054635681153669342928747672;
    uint256 constant IC110y = 10107170889048235861586566940390888494655268645042982078920456558637869270619;
    
    uint256 constant IC111x = 18881857246545678321936069964365549852913330875012866616268738917938601146103;
    uint256 constant IC111y = 168429350625343192617403491751071955437707893301308980325152658020944896920;
    
    uint256 constant IC112x = 12120738517809078543021965258507229493584238263920871491667132999194084446362;
    uint256 constant IC112y = 19872690820991699833142770898206374532921570393867587060921124662230837274106;
    
    uint256 constant IC113x = 7215311452388426128880196213091205245988310893925361678375131110833582237490;
    uint256 constant IC113y = 8715443146494181328889706890346879190717679189610460693700369276486399087785;
    
    uint256 constant IC114x = 21852301117103401413230747988001461860957471490131160324798497894379475392321;
    uint256 constant IC114y = 2613641598974232787141401962416350915896438136074501096247730880248888586531;
    
    uint256 constant IC115x = 17527086694176480729814538410247186448173397582069957368590484026848487957719;
    uint256 constant IC115y = 8079088449162845777986918024129820252386047403260138935019975196366396297339;
    
    uint256 constant IC116x = 7522302917437340450581927623906649736527647861688842609140232439103346707693;
    uint256 constant IC116y = 7724036849796022514412375557039582820013937611134704275111509963559803357193;
    
    uint256 constant IC117x = 5429934633748005775383969418752541681637223579656717788331042142613951606995;
    uint256 constant IC117y = 10942669801898096586548715429379593490274568923760868128566688146246406108492;
    
    uint256 constant IC118x = 17156665895807308494169156875413915236608466935768099266972439728918513815786;
    uint256 constant IC118y = 10518498759351259701257779581205016890294040615842761197857129514733971830434;
    
    uint256 constant IC119x = 6858529555570675115624543318607586667476211546876893536696997239344710416043;
    uint256 constant IC119y = 17130020678723769771124815549016867161101492932125774462078604439955946074892;
    
    uint256 constant IC120x = 21046211932362210850547558695402569444848278229037760516624442037115411813155;
    uint256 constant IC120y = 20685521873013020823190038517513665181393634074224175877840293417674339733083;
    
    uint256 constant IC121x = 6852345909031769147082036098993528054462595088025677905362258330347225824710;
    uint256 constant IC121y = 17373113363088210093550703449478347973410212772435341970499266771487158415647;
    
    uint256 constant IC122x = 4656517856407442749946036177615493896149890810689971116252547489282931575899;
    uint256 constant IC122y = 14163147467729687004677759942747323732497790235507096456596731678286531837055;
    
    uint256 constant IC123x = 16253767425955869085837084439697613434148788998301748848726438010057817152073;
    uint256 constant IC123y = 8351392893105484407302153849529503651262708969092737112239676088068427115970;
    
    uint256 constant IC124x = 7201001451333579715343364500821848875856776383751659916034854301342935608149;
    uint256 constant IC124y = 8336852140155128325898931158670994444879824434313701647881261923749577213058;
    
    uint256 constant IC125x = 13494613569172008849614813182854201906676217695548625761055425725940470190953;
    uint256 constant IC125y = 11326985879443911842868776947342592452383871603887695243031371733335659874922;
    
    uint256 constant IC126x = 13284144064125270044888034126181667423328109310641574788762322534721103480139;
    uint256 constant IC126y = 1748641380173877134313707038388948246113265212261642919107118101107584944327;
    
 
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[126] calldata _pubSignals) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, r)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }
            
            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                
                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))
                
                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))
                
                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))
                
                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))
                
                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))
                
                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))
                
                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))
                
                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))
                
                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))
                
                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))
                
                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))
                
                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))
                
                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))
                
                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))
                
                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))
                
                g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                
                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
                
                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
                
                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
                
                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
                
                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
                
                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
                
                g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))
                
                g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))
                
                g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))
                
                g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))
                
                g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))
                
                g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))
                
                g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))
                
                g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))
                
                g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))
                
                g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))
                
                g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))
                
                g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))
                
                g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))
                
                g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))
                
                g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))
                
                g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))
                
                g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))
                
                g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))
                
                g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))
                
                g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))
                
                g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))
                
                g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))
                
                g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))
                
                g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))
                
                g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))
                
                g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))
                
                g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))
                
                g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))
                
                g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))
                
                g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))
                
                g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))
                
                g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))
                
                g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))
                
                g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))
                
                g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))
                
                g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))
                
                g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))
                
                g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))
                
                g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))
                
                g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))
                
                g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))
                
                g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))
                
                g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))
                
                g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))
                
                g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))
                
                g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))
                
                g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))
                
                g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))
                
                g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))
                
                g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))
                
                g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))
                
                g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))
                
                g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))
                
                g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))
                
                g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))
                
                g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))
                
                g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))
                
                g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))
                
                g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))
                
                g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))
                
                g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))
                
                g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))
                
                g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))
                
                g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))
                
                g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))
                
                g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))
                
                g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))
                
                g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))
                
                g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))
                
                g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))
                
                g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))
                
                g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))
                
                g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))
                
                g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))
                
                g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))
                
                g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))
                
                g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))
                
                g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))
                
                g1_mulAccC(_pVk, IC101x, IC101y, calldataload(add(pubSignals, 3200)))
                
                g1_mulAccC(_pVk, IC102x, IC102y, calldataload(add(pubSignals, 3232)))
                
                g1_mulAccC(_pVk, IC103x, IC103y, calldataload(add(pubSignals, 3264)))
                
                g1_mulAccC(_pVk, IC104x, IC104y, calldataload(add(pubSignals, 3296)))
                
                g1_mulAccC(_pVk, IC105x, IC105y, calldataload(add(pubSignals, 3328)))
                
                g1_mulAccC(_pVk, IC106x, IC106y, calldataload(add(pubSignals, 3360)))
                
                g1_mulAccC(_pVk, IC107x, IC107y, calldataload(add(pubSignals, 3392)))
                
                g1_mulAccC(_pVk, IC108x, IC108y, calldataload(add(pubSignals, 3424)))
                
                g1_mulAccC(_pVk, IC109x, IC109y, calldataload(add(pubSignals, 3456)))
                
                g1_mulAccC(_pVk, IC110x, IC110y, calldataload(add(pubSignals, 3488)))
                
                g1_mulAccC(_pVk, IC111x, IC111y, calldataload(add(pubSignals, 3520)))
                
                g1_mulAccC(_pVk, IC112x, IC112y, calldataload(add(pubSignals, 3552)))
                
                g1_mulAccC(_pVk, IC113x, IC113y, calldataload(add(pubSignals, 3584)))
                
                g1_mulAccC(_pVk, IC114x, IC114y, calldataload(add(pubSignals, 3616)))
                
                g1_mulAccC(_pVk, IC115x, IC115y, calldataload(add(pubSignals, 3648)))
                
                g1_mulAccC(_pVk, IC116x, IC116y, calldataload(add(pubSignals, 3680)))
                
                g1_mulAccC(_pVk, IC117x, IC117y, calldataload(add(pubSignals, 3712)))
                
                g1_mulAccC(_pVk, IC118x, IC118y, calldataload(add(pubSignals, 3744)))
                
                g1_mulAccC(_pVk, IC119x, IC119y, calldataload(add(pubSignals, 3776)))
                
                g1_mulAccC(_pVk, IC120x, IC120y, calldataload(add(pubSignals, 3808)))
                
                g1_mulAccC(_pVk, IC121x, IC121y, calldataload(add(pubSignals, 3840)))
                
                g1_mulAccC(_pVk, IC122x, IC122y, calldataload(add(pubSignals, 3872)))
                
                g1_mulAccC(_pVk, IC123x, IC123y, calldataload(add(pubSignals, 3904)))
                
                g1_mulAccC(_pVk, IC124x, IC124y, calldataload(add(pubSignals, 3936)))
                
                g1_mulAccC(_pVk, IC125x, IC125y, calldataload(add(pubSignals, 3968)))
                
                g1_mulAccC(_pVk, IC126x, IC126y, calldataload(add(pubSignals, 4000)))
                

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))


                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)


                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            
            checkField(calldataload(add(_pubSignals, 0)))
            
            checkField(calldataload(add(_pubSignals, 32)))
            
            checkField(calldataload(add(_pubSignals, 64)))
            
            checkField(calldataload(add(_pubSignals, 96)))
            
            checkField(calldataload(add(_pubSignals, 128)))
            
            checkField(calldataload(add(_pubSignals, 160)))
            
            checkField(calldataload(add(_pubSignals, 192)))
            
            checkField(calldataload(add(_pubSignals, 224)))
            
            checkField(calldataload(add(_pubSignals, 256)))
            
            checkField(calldataload(add(_pubSignals, 288)))
            
            checkField(calldataload(add(_pubSignals, 320)))
            
            checkField(calldataload(add(_pubSignals, 352)))
            
            checkField(calldataload(add(_pubSignals, 384)))
            
            checkField(calldataload(add(_pubSignals, 416)))
            
            checkField(calldataload(add(_pubSignals, 448)))
            
            checkField(calldataload(add(_pubSignals, 480)))
            
            checkField(calldataload(add(_pubSignals, 512)))
            
            checkField(calldataload(add(_pubSignals, 544)))
            
            checkField(calldataload(add(_pubSignals, 576)))
            
            checkField(calldataload(add(_pubSignals, 608)))
            
            checkField(calldataload(add(_pubSignals, 640)))
            
            checkField(calldataload(add(_pubSignals, 672)))
            
            checkField(calldataload(add(_pubSignals, 704)))
            
            checkField(calldataload(add(_pubSignals, 736)))
            
            checkField(calldataload(add(_pubSignals, 768)))
            
            checkField(calldataload(add(_pubSignals, 800)))
            
            checkField(calldataload(add(_pubSignals, 832)))
            
            checkField(calldataload(add(_pubSignals, 864)))
            
            checkField(calldataload(add(_pubSignals, 896)))
            
            checkField(calldataload(add(_pubSignals, 928)))
            
            checkField(calldataload(add(_pubSignals, 960)))
            
            checkField(calldataload(add(_pubSignals, 992)))
            
            checkField(calldataload(add(_pubSignals, 1024)))
            
            checkField(calldataload(add(_pubSignals, 1056)))
            
            checkField(calldataload(add(_pubSignals, 1088)))
            
            checkField(calldataload(add(_pubSignals, 1120)))
            
            checkField(calldataload(add(_pubSignals, 1152)))
            
            checkField(calldataload(add(_pubSignals, 1184)))
            
            checkField(calldataload(add(_pubSignals, 1216)))
            
            checkField(calldataload(add(_pubSignals, 1248)))
            
            checkField(calldataload(add(_pubSignals, 1280)))
            
            checkField(calldataload(add(_pubSignals, 1312)))
            
            checkField(calldataload(add(_pubSignals, 1344)))
            
            checkField(calldataload(add(_pubSignals, 1376)))
            
            checkField(calldataload(add(_pubSignals, 1408)))
            
            checkField(calldataload(add(_pubSignals, 1440)))
            
            checkField(calldataload(add(_pubSignals, 1472)))
            
            checkField(calldataload(add(_pubSignals, 1504)))
            
            checkField(calldataload(add(_pubSignals, 1536)))
            
            checkField(calldataload(add(_pubSignals, 1568)))
            
            checkField(calldataload(add(_pubSignals, 1600)))
            
            checkField(calldataload(add(_pubSignals, 1632)))
            
            checkField(calldataload(add(_pubSignals, 1664)))
            
            checkField(calldataload(add(_pubSignals, 1696)))
            
            checkField(calldataload(add(_pubSignals, 1728)))
            
            checkField(calldataload(add(_pubSignals, 1760)))
            
            checkField(calldataload(add(_pubSignals, 1792)))
            
            checkField(calldataload(add(_pubSignals, 1824)))
            
            checkField(calldataload(add(_pubSignals, 1856)))
            
            checkField(calldataload(add(_pubSignals, 1888)))
            
            checkField(calldataload(add(_pubSignals, 1920)))
            
            checkField(calldataload(add(_pubSignals, 1952)))
            
            checkField(calldataload(add(_pubSignals, 1984)))
            
            checkField(calldataload(add(_pubSignals, 2016)))
            
            checkField(calldataload(add(_pubSignals, 2048)))
            
            checkField(calldataload(add(_pubSignals, 2080)))
            
            checkField(calldataload(add(_pubSignals, 2112)))
            
            checkField(calldataload(add(_pubSignals, 2144)))
            
            checkField(calldataload(add(_pubSignals, 2176)))
            
            checkField(calldataload(add(_pubSignals, 2208)))
            
            checkField(calldataload(add(_pubSignals, 2240)))
            
            checkField(calldataload(add(_pubSignals, 2272)))
            
            checkField(calldataload(add(_pubSignals, 2304)))
            
            checkField(calldataload(add(_pubSignals, 2336)))
            
            checkField(calldataload(add(_pubSignals, 2368)))
            
            checkField(calldataload(add(_pubSignals, 2400)))
            
            checkField(calldataload(add(_pubSignals, 2432)))
            
            checkField(calldataload(add(_pubSignals, 2464)))
            
            checkField(calldataload(add(_pubSignals, 2496)))
            
            checkField(calldataload(add(_pubSignals, 2528)))
            
            checkField(calldataload(add(_pubSignals, 2560)))
            
            checkField(calldataload(add(_pubSignals, 2592)))
            
            checkField(calldataload(add(_pubSignals, 2624)))
            
            checkField(calldataload(add(_pubSignals, 2656)))
            
            checkField(calldataload(add(_pubSignals, 2688)))
            
            checkField(calldataload(add(_pubSignals, 2720)))
            
            checkField(calldataload(add(_pubSignals, 2752)))
            
            checkField(calldataload(add(_pubSignals, 2784)))
            
            checkField(calldataload(add(_pubSignals, 2816)))
            
            checkField(calldataload(add(_pubSignals, 2848)))
            
            checkField(calldataload(add(_pubSignals, 2880)))
            
            checkField(calldataload(add(_pubSignals, 2912)))
            
            checkField(calldataload(add(_pubSignals, 2944)))
            
            checkField(calldataload(add(_pubSignals, 2976)))
            
            checkField(calldataload(add(_pubSignals, 3008)))
            
            checkField(calldataload(add(_pubSignals, 3040)))
            
            checkField(calldataload(add(_pubSignals, 3072)))
            
            checkField(calldataload(add(_pubSignals, 3104)))
            
            checkField(calldataload(add(_pubSignals, 3136)))
            
            checkField(calldataload(add(_pubSignals, 3168)))
            
            checkField(calldataload(add(_pubSignals, 3200)))
            
            checkField(calldataload(add(_pubSignals, 3232)))
            
            checkField(calldataload(add(_pubSignals, 3264)))
            
            checkField(calldataload(add(_pubSignals, 3296)))
            
            checkField(calldataload(add(_pubSignals, 3328)))
            
            checkField(calldataload(add(_pubSignals, 3360)))
            
            checkField(calldataload(add(_pubSignals, 3392)))
            
            checkField(calldataload(add(_pubSignals, 3424)))
            
            checkField(calldataload(add(_pubSignals, 3456)))
            
            checkField(calldataload(add(_pubSignals, 3488)))
            
            checkField(calldataload(add(_pubSignals, 3520)))
            
            checkField(calldataload(add(_pubSignals, 3552)))
            
            checkField(calldataload(add(_pubSignals, 3584)))
            
            checkField(calldataload(add(_pubSignals, 3616)))
            
            checkField(calldataload(add(_pubSignals, 3648)))
            
            checkField(calldataload(add(_pubSignals, 3680)))
            
            checkField(calldataload(add(_pubSignals, 3712)))
            
            checkField(calldataload(add(_pubSignals, 3744)))
            
            checkField(calldataload(add(_pubSignals, 3776)))
            
            checkField(calldataload(add(_pubSignals, 3808)))
            
            checkField(calldataload(add(_pubSignals, 3840)))
            
            checkField(calldataload(add(_pubSignals, 3872)))
            
            checkField(calldataload(add(_pubSignals, 3904)))
            
            checkField(calldataload(add(_pubSignals, 3936)))
            
            checkField(calldataload(add(_pubSignals, 3968)))
            
            checkField(calldataload(add(_pubSignals, 4000)))
            

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

            mstore(0, isValid)
             return(0, 0x20)
         }
     }
 }
