// Copyright 2025 Guru Vamsi Policharla
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
pragma circom 2.2.2;

include "half_ntt.circom";
include "sha2/sha256/sha256_hash_bytes.circom";
include "sha3/sha3_bits.circom";

template samplePolyCBD(l,eta) {
    var n = 256;
    var q = 3329;
    assert(l == 2*eta*n);

    signal input b[l];
    signal output a[n];

    var x = 0;
    var y = 0;
    for(var i = 0; i < n; i++) {
        for(var j = 0; j < eta; j++) {
            x += b[2*eta*i + j];
            y += b[2*eta*i + j + eta];
        }
        a[i] <== FastSubMod(q)([x,y]);
        x = 0;
        y = 0;
    }
}
    

template kpke_enc() {
    var q = 3329;
    var n = 256;
    var k = 2;

    var eta1 = 3;
    var eta2 = 2;
    var du = 10;
    var dv = 4;

    var l1 = 2*eta1*n;
    var l2 = 2*eta2*n;

    signal input randomness[n];
    signal input m[n]; // entries in {0,1665}

    /*
        Sample y, e1, e2 as follows:
        y  is a 512-byte string, generated with two PRF calls
        e1 is a 512-byte string, generated with two PRF calls
        e2 is a 256-byte string, generated with a single PRF call
        In the K-PKE spec, N is incremented for each PRF call.
        We manually increment N by defining variables 'zero' through 'four.'
    */

    var zero[8] = [0,0,0,0,0,0,0,0];
    var one[8] = [1,0,0,0,0,0,0,0];
    var two[8] = [0,1,0,0,0,0,0,0];
    var three[8] = [1,1,0,0,0,0,0,0];
    var four[8] = [0,0,1,0,0,0,0,0];

    signal shake_input_bits[5][33*8];
    for (var i=0; i<32*8; i++) {
        shake_input_bits[0][i] <== randomness[i];
        shake_input_bits[1][i] <== randomness[i];
        shake_input_bits[2][i] <== randomness[i];
        shake_input_bits[3][i] <== randomness[i];
        shake_input_bits[4][i] <== randomness[i];
    }
    for (var i=0; i<8; i++) {
        shake_input_bits[0][i+32*8] <== zero[i];
        shake_input_bits[1][i+32*8] <== one[i];
        shake_input_bits[2][i+32*8] <== two[i];
        shake_input_bits[3][i+32*8] <== three[i];
        shake_input_bits[4][i+32*8] <== four[i];
    }
    
    signal prf_y[2][l1]; 
    prf_y[0] <== SHAKE256(33*8, l1)(shake_input_bits[0]);
    prf_y[1] <== SHAKE256(33*8, l1)(shake_input_bits[1]);

    signal prf_e1[2][l2];
    prf_e1[0] <== SHAKE256(33*8, l2)(shake_input_bits[2]);
    prf_e1[1] <== SHAKE256(33*8, l2)(shake_input_bits[3]);

    signal prf_e2[l2];
    prf_e2 <== SHAKE256(33*8, l2)(shake_input_bits[4]);
    
    signal y[2][n];
    signal e1[2][n];
    signal e2[n];

    y[0] <== samplePolyCBD(l1,eta1)(prf_y[0]);
    y[1] <== samplePolyCBD(l1,eta1)(prf_y[1]);

    e1[0] <== samplePolyCBD(l2,eta2)(prf_e1[0]);
    e1[1] <== samplePolyCBD(l2,eta2)(prf_e1[1]);

    e2 <== samplePolyCBD(l2,eta2)(prf_e2);

    signal y_hat[2][n];
    y_hat[0] <== halfNTT()(y[0]);
    y_hat[1] <== halfNTT()(y[1]);

    // NTT-ed and transposed public key matrix A
    var a[2][2][n];
    a[0][0] = [512,1685,732,3050,1525,59,3271,2324,2715,1542,1240,174,937,2765,869,2299,3221,1191,3190,1966,665,2449,399,588,2087,2666,3073,462,923,243,1320,1300,3039,103,931,2742,1624,469,2962,831,3032,2275,2561,1766,1876,1057,2270,2379,2722,2162,2386,2206,3006,3052,2658,1320,1966,2099,2069,616,616,1658,2808,2995,1487,2822,1398,2945,2976,601,3323,564,467,2406,2981,2595,744,652,2858,2185,1012,514,158,654,2695,448,280,1457,1932,2743,2243,1630,1191,2533,1805,1835,2799,1402,2143,2304,1925,1056,2552,159,868,641,485,786,598,471,1166,1442,62,797,411,3268,2915,2446,671,3283,2152,1093,2904,1284,1468,3061,3162,7,1679,1757,704,717,3294,2378,3323,1816,1604,1089,164,1895,2231,417,2094,1310,3173,2158,2935,2261,1167,1703,3250,263,1880,3006,3267,1375,688,2643,563,3136,2764,1258,1624,3028,2778,773,298,2237,890,1830,2710,1361,2087,2902,2986,403,2966,154,3230,1390,2634,1144,3051,78,512,545,323,3036,2511,2146,2339,2243,762,2807,2552,3008,792,3071,924,695,819,320,3274,236,123,2415,2892,312,2475,329,2723,1809,1750,347,219,1600,4,2073,858,2600,1624,2196,2656,2092,2290,417,6,528,1924,1164,899,1862,2028,3271,2991,2942,184,3297,1369,1181,762,2419,839,1821,2465,356,2389,2229,2694,1237,1693,115,1555,2661,608,947];

    a[0][1] = [1672,2562,1545,368,1229,23,2384,2676,3303,2711,1942,1718,1537,1177,1679,1369,737,3018,2951,3101,313,1102,840,92,1480,637,1316,1450,1086,2106,1715,3218,2159,2511,3096,2686,1558,1405,3014,1624,1889,2496,59,2384,1562,3129,138,1268,2555,1821,1753,1117,795,2719,2854,2129,222,3238,2262,1552,2871,757,1227,3211,2115,1592,2926,3054,113,150,3232,1729,1022,2216,2,2795,1130,2771,1149,1513,2879,613,1758,1292,1197,2589,1148,2844,518,2550,1291,1065,1636,2815,1229,2704,576,2743,2168,2586,1205,2847,1518,833,982,1219,2703,1475,2140,1862,2206,1258,1494,1675,3061,3142,1709,1236,294,50,908,1291,1578,1261,1517,638,2779,1838,2487,180,50,467,2604,2885,46,895,1606,1372,12,63,2480,79,834,1318,2863,1588,274,1029,455,1869,1550,871,2351,258,154,1862,1091,1159,779,1884,390,2376,703,100,50,253,2260,629,3128,1580,2361,219,1439,1344,1778,1478,2858,62,460,2938,1444,1407,2321,742,1493,480,3042,1168,2015,1496,216,882,1834,228,1090,3137,641,2733,1618,574,2211,559,1085,2346,2509,2423,2380,487,3107,1665,1924,1539,3265,824,1791,3136,277,2866,1061,1634,455,247,2717,2005,180,1636,409,3062,2600,2827,3289,632,3144,2360,2017,2730,3149,2696,2277,2388,3067,3043,911,2316,1425,918,1952,2270,348,564,965,2787,1678,843,1550,305];

    a[1][0] = [1941,2293,2601,1976,2363,3170,1054,445,2535,512,856,1503,173,1398,2461,1924,627,638,3061,3054,1019,2747,2913,110,506,2677,1702,1180,654,798,2087,389,1868,2850,2905,2894,802,3120,95,2791,2815,1120,3270,3078,3214,2757,1941,1256,849,284,1306,1074,1883,2937,793,2115,264,750,2792,2735,2274,718,344,3278,2817,1433,1781,3273,305,2753,604,3177,334,2496,1827,1466,971,1692,2626,692,789,1097,653,1781,3282,1600,2794,1911,460,2440,1677,656,1311,1509,1015,2117,2557,673,354,465,1801,2977,2929,3080,1323,2176,178,2952,1891,2336,347,626,307,1631,1655,3206,3276,284,579,33,1344,1180,2643,3187,379,343,2910,432,3240,494,1917,1591,665,1358,2488,2508,1542,2368,3276,1222,616,434,1552,2386,703,1805,695,1782,3227,1293,1580,2981,1282,1602,295,2437,1549,3246,1088,1828,3052,3128,3254,1592,555,2023,147,1949,2639,1282,1655,347,2811,488,2433,1926,1359,262,241,986,2498,1539,2975,1304,2310,409,2283,2877,905,693,577,2619,2287,2070,104,1327,1253,1640,2936,493,923,1331,2939,2298,2496,1288,1090,12,732,1416,27,464,2950,1443,1197,2594,783,1232,157,542,1247,228,2789,1816,2908,2474,1822,544,952,1452,391,345,932,197,2995,3116,1604,2496,1335,2591,1304,399,1231,928,2449,2325,2010,2814,2409,395,3248,2216,2440,2424,1904,1079];

    a[1][1] = [475,2051,1648,3059,2948,924,48,2755,2835,1573,1993,637,2059,304,2787,1178,519,2395,3006,1735,1246,2005,1925,2926,1408,329,2270,2387,1020,3160,214,2613,1200,1774,2032,3319,1415,1305,2724,1781,1881,1987,1689,1075,59,949,1474,2823,1538,1989,1208,1421,226,2016,1022,1065,2365,1907,1417,1006,2698,508,1912,456,702,1014,1215,843,1360,1827,1592,763,2108,3117,340,306,2925,1429,2731,1814,730,1298,1745,347,1753,2616,159,1822,1746,3169,132,256,848,1215,2509,264,2957,1981,3302,897,2118,1583,1516,300,240,556,2060,2513,1575,788,1345,1977,319,842,1212,1654,1554,2292,2507,786,2738,3138,1485,2433,757,2793,1392,437,3222,543,130,535,498,1889,3011,825,686,1730,2485,1254,1425,2589,2092,1148,2791,1817,3186,618,185,836,204,1851,2609,441,13,1082,1649,2890,2438,3240,3049,907,1796,111,443,1788,2111,2143,1052,2584,792,2608,2700,1256,3159,2450,2534,2743,1691,1345,2621,960,1996,3309,1843,1222,640,597,2210,745,284,2527,1320,196,2196,2842,657,1201,185,1810,965,1163,2707,1152,1980,380,346,2466,2717,504,431,202,774,1781,2770,2135,1971,860,1436,2516,1154,1500,236,2490,2583,2348,566,2828,1818,2139,1238,129,2367,682,1636,441,892,1543,1934,1906,2709,3294,1043,600,1059,788,745,2079,1958,2464,2271,248,2601,1432,897,2596];
    
    var t[2][n];
    t[0] = [644,1659,1628,799,893,2723,475,2596,2317,1848,2945,2001,2373,2108,129,605,2519,847,1497,148,698,2777,2800,1053,1788,1469,1838,2369,835,2704,2448,755,1733,2682,3012,138,459,3264,1797,1649,2055,433,2546,475,1408,1054,449,1915,2243,215,625,894,1363,2014,2643,461,2565,1893,3293,1013,2918,2549,660,1140,410,169,1122,2205,1368,1500,2626,2498,2397,1465,949,810,1586,631,1970,3017,2962,3106,742,1085,3244,1300,3300,2377,261,1470,725,122,346,3260,2076,911,391,951,2560,902,2172,1122,0,1703,1025,1279,2757,2441,1061,2335,1697,1180,221,396,3002,3236,3037,2911,825,2015,2529,351,1834,1248,1704,1420,2918,628,3260,2422,869,2689,1389,819,2944,765,1794,3058,2663,1460,1079,3069,297,1559,3161,1054,1797,1311,466,1363,2922,2226,2078,2004,3313,895,378,404,2452,282,97,739,2377,2915,614,1462,1463,874,2060,2138,2565,408,1522,2678,3091,1201,1027,1212,3071,213,101,342,3203,200,2468,2637,583,585,895,768,1310,1998,1830,2655,1708,1467,2651,2344,1574,2546,2610,1597,2401,590,1731,1760,24,2896,1821,47,2248,610,939,1342,132,1071,84,1357,2885,953,267,260,299,3047,1522,2711,2940,844,1130,2870,705,1286,2671,2332,1723,2637,1035,2987,2976,1557,1184,214,2271,1911,2487,28,2065,1543,2953,3197,1025,804,719,2317,2134,597];

    t[1] = [2301,154,2056,3223,1013,2962,1790,3162,2682,2145,1176,1507,2544,1675,1486,594,766,532,84,2553,3175,693,419,385,1777,2051,2379,347,329,1968,2403,549,1466,618,557,3011,1115,1175,442,3242,1385,1135,832,2742,272,369,2805,1031,377,509,1528,3281,888,2440,2052,3317,1845,984,1109,335,3327,2609,1934,3164,2987,1260,979,1502,730,1511,1521,2671,2710,2515,2349,1147,444,547,2162,876,3043,847,2923,3020,2212,1097,3141,1378,1892,1136,522,2245,2337,1938,911,2486,3014,1003,280,1781,1507,248,1848,2386,1809,1582,1969,2306,2711,2231,2314,2369,3118,3215,2924,2141,976,3022,1772,517,900,2958,1811,336,3017,3079,209,2691,621,1520,1690,2211,1918,482,2666,743,1452,1221,2263,2646,1748,51,2537,2275,525,2205,1066,2181,3120,1373,367,2286,1950,3318,655,1127,2556,193,2558,2550,335,2431,1663,1290,1273,206,3303,1509,3115,2187,2916,1266,3273,2446,745,767,894,1220,3281,629,126,1958,657,946,831,833,2356,1641,406,1562,2998,1685,585,751,1750,1492,930,2434,674,2473,2672,1825,2373,1738,1060,3022,2343,1677,2155,3284,1532,2857,2052,2508,130,2748,2812,2325,2756,797,429,1813,359,585,2041,1150,2829,178,972,3313,3220,1164,408,2069,3099,2785,1785,1314,3008,3035,1391,1152,1711,1905,668,2,2693,2635,1016,1256,2140,1195,1449,2987,2816,1835];

    // compute u = NTTinv(A^T * y) + e1
    // intermediate values
    signal a00_y0[n];
    signal a01_y1[n];
    signal a10_y0[n];
    signal a11_y1[n];

    a00_y0 <== multiply_nttvec()(a[0][0],y_hat[0]);
    a01_y1 <== multiply_nttvec()(a[0][1],y_hat[1]);
    a10_y0 <== multiply_nttvec()(a[1][0],y_hat[0]);
    a11_y1 <== multiply_nttvec()(a[1][1],y_hat[1]);
    
    signal ATy_hat[2][n];
    for (var i = 0; i < n; i++) {
        ATy_hat[0][i] <== FastAddMod(q)([a00_y0[i],a01_y1[i]]);
        ATy_hat[1][i] <== FastAddMod(q)([a10_y0[i],a11_y1[i]]);
    }

    signal ATy[2][n];
    ATy[0] <== inv_halfNTT()(ATy_hat[0]);
    ATy[1] <== inv_halfNTT()(ATy_hat[1]);

    signal u[2][n];
    for (var i = 0; i < n; i++) {
        u[0][i] <== FastAddMod(q)([ATy[0][i],e1[0][i]]);
        u[1][i] <== FastAddMod(q)([ATy[1][i],e1[1][i]]);
    }

    // compute v = NTTinv(t*y) + e2 + m
    // intermediate values
    signal t0_y0[n];
    signal t1_y1[n];

    t0_y0 <== multiply_nttvec()(t[0],y_hat[0]);
    t1_y1 <== multiply_nttvec()(t[1],y_hat[1]);

    signal t_y_hat[n];
    for (var i = 0; i < n; i++) {
        t_y_hat[i] <== FastAddMod(q)([t0_y0[i],t1_y1[i]]);
    }

    signal t_y[n];
    t_y <== inv_halfNTT()(t_y_hat);

    signal t_y_e2[n];
    for (var i = 0; i < n; i++) {
        t_y_e2[i] <== FastAddMod(q)([t_y[i],e2[i]]);
    }

    signal m_compress[256];
    for (var i = 0; i < 256; i++) {
        m_compress[i] <== m[i] * 1665;
    }

    signal v[n];
    for (var i = 0; i < n; i++) {
        v[i] <== FastAddMod(q)([t_y_e2[i],m_compress[i]]);
    }

    signal compressed_u[2][n];
    signal compressed_v[n];

    for (var i = 0; i < n; i++) {
        compressed_u[0][i] <== ModSwitchInt(1<<du, q)(u[0][i]);
        compressed_u[1][i] <== ModSwitchInt(1<<du, q)(u[1][i]);
        compressed_v[i] <== ModSwitchInt(1<<dv, q)(v[i]);
    }

    // convert to bytes according to the spec to get c1 and c2
    signal c1[k*n*du]; // 256*2 entries in 2^10 amounts to 640 bytes
    signal c2[n*dv]; // 256*1 entries in 2^4 amounts to 128 bytes

    // convert compressed_u and compressed_v to bits using Num2Bits
    for (var i = 0; i < n; i++) {
        var out[du] = Num2Bits(du)(compressed_u[0][i]);
        for (var j = 0; j < du; j++) {
            c1[du*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[du] = Num2Bits(du)(compressed_u[1][i]);
        for (var j = 0; j < du; j++) {
            c1[du*n + du*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[dv] = Num2Bits(dv)(compressed_v[i]);
        for (var j = 0; j < dv; j++) {
            c2[dv*i + j] <== out[j];
        }
    }

    // output ciphertext
    signal output c[n*(k*du + dv)];
    for (var i = 0; i < k*n*du; i++) {
        c[i] <== c1[i];
    }
    
    for (var i = 0; i < n*dv; i++) {
        c[i + k*n*du] <== c2[i];
    }

    
    // // compute the SHA256 hash of the concatenation of c1 and c2
    // signal sha256_input[k*n*du + n*dv];
    // for (var i = 0; i < k*n*du; i++) {
    //     sha256_input[i] <== compressed_u_bits[i];
    // }
    // for (var i = 0; i < n*dv; i++) {
    //     sha256_input[k*n*du + i] <== compressed_v_bits[i];
    // }

    // // convert to bytes
    // signal sha256_input_bytes[(k*n*du + n*dv)/8];
    // for (var i = 0; i < (k*n*du + n*dv)/8; i++) {
    //     sha256_input_bytes[i] <== Bits2Num(8)(
    //         [sha256_input[8*i], 
    //         sha256_input[8*i+1], 
    //         sha256_input[8*i+2], 
    //         sha256_input[8*i+3], 
    //         sha256_input[8*i+4], 
    //         sha256_input[8*i+5], 
    //         sha256_input[8*i+6], 
    //         sha256_input[8*i+7]]
    //     );
    // }

    // signal h[32] <== Sha256_hash_bytes_digest((k*n*du + n*dv)/8)(sha256_input_bytes);

    // signal output h0;
    // signal output h1;

    // var sum = 0;
    // for (var i = 0; i < 16; i++) {
    //     sum += h[i]*(1<<(8*i));
    // }
    // h0 <== sum;

    // sum = 0;
    // for (var i = 16; i < 32; i++) {
    //     sum += h[i]*(1<<(8*(i-16)));
    // }
    // h1 <== sum;
}