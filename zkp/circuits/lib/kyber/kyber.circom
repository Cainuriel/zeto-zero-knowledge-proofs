// Copyright 2025 Guru Vamsi Policharla
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
pragma circom 2.2.2;

include "half_ntt.circom";
include "sha2/sha256/sha256_hash_bytes.circom";
include "sha3/sha3_bits.circom";

template samplePolyCBD(l,eta) {
    var n = 256;
    var q = 3329;
    assert(l == 2*eta*n);

    signal input b[l];
    signal output a[n];

    var x = 0;
    var y = 0;
    for(var i = 0; i < n; i++) {
        for(var j = 0; j < eta; j++) {
            x += b[2*eta*i + j];
            y += b[2*eta*i + j + eta];
        }
        a[i] <== FastSubMod(q)([x,y]);
        x = 0;
        y = 0;
    }
}
    

template kyber_enc() {
    var q = 3329;
    var n = 256;
    var k = 2;

    var eta1 = 3;
    var eta2 = 2;

    var l1 = 2*eta1*n;
    var l2 = 2*eta2*n;

    signal input randomness[n];
    signal input m[n]; // entries in {0,1665}

    // sample r, e1, e2
    var zero[8] = [0,0,0,0,0,0,0,0];
    var one[8] = [1,0,0,0,0,0,0,0];
    var two[8] = [0,1,0,0,0,0,0,0];
    var three[8] = [1,1,0,0,0,0,0,0];
    var four[8] = [0,0,1,0,0,0,0,0];

    signal shake_input_bits[5][33*8];
    for (var i=0; i<32*8; i++) {
        shake_input_bits[0][i] <== randomness[i];
        shake_input_bits[1][i] <== randomness[i];
        shake_input_bits[2][i] <== randomness[i];
        shake_input_bits[3][i] <== randomness[i];
        shake_input_bits[4][i] <== randomness[i];
    }
    for (var i=0; i<8; i++) {
        shake_input_bits[0][i+32*8] <== zero[i];
        shake_input_bits[1][i+32*8] <== one[i];
        shake_input_bits[2][i+32*8] <== two[i];
        shake_input_bits[3][i+32*8] <== three[i];
        shake_input_bits[4][i+32*8] <== four[i];
    }
    
    signal prf_r[2][l1]; 
    prf_r[0] <== SHAKE256(33*8, l1)(shake_input_bits[0]);
    prf_r[1] <== SHAKE256(33*8, l1)(shake_input_bits[1]);

    signal prf_e1[2][l2];
    prf_e1[0] <== SHAKE256(33*8, l2)(shake_input_bits[2]);
    prf_e1[1] <== SHAKE256(33*8, l2)(shake_input_bits[3]);

    signal prf_e2[l2];
    prf_e2 <== SHAKE256(33*8, l2)(shake_input_bits[4]);
    
    signal r[2][n];
    signal e1[2][n];
    signal e2[n];

    r[0] <== samplePolyCBD(l1,eta1)(prf_r[0]);
    r[1] <== samplePolyCBD(l1,eta1)(prf_r[1]);

    e1[0] <== samplePolyCBD(l2,eta2)(prf_e1[0]);
    e1[1] <== samplePolyCBD(l2,eta2)(prf_e1[1]);

    e2 <== samplePolyCBD(l2,eta2)(prf_e2);

    signal r_hat[2][n];
    r_hat[0] <== halfNTT()(r[0]);
    r_hat[1] <== halfNTT()(r[1]);

    // NTT-ed and transposed public key matrix A
    var a[2][2][n];
    a[0][0] = [2103,1591,3178,2703,1564,409,2437,1290,1466,3204,659,2145,1251,266,3087,48,1759,2061,1876,1589,266,1753,3288,1469,772,972,2668,156,3237,3185,2837,1610,2322,1206,1543,2550,710,2864,2000,2834,2261,1023,1564,2072,166,1978,1387,3217,3246,1542,2104,2770,1422,566,2911,213,2609,2356,40,24,879,1750,306,1080,470,1527,1706,3193,602,1708,2994,2632,2593,106,2158,3226,1502,110,651,2689,1867,1169,2269,455,3246,1923,2781,1512,1877,842,1999,782,1482,3075,1086,1278,1453,2153,2026,2773,324,525,2489,684,2593,63,764,2601,34,3118,1484,761,1887,2247,2532,2211,2261,1710,519,612,142,2655,2479,3119,2911,3014,2664,3283,1035,2509,266,2309,2552,75,1508,2038,288,2804,2981,1194,355,1409,3104,1247,741,1503,246,1626,2106,321,2127,2237,2534,1747,728,893,2939,3308,2006,1271,236,2756,1311,1929,771,1214,535,557,2193,1687,2787,2081,274,1839,329,1248,2926,116,328,2323,2891,1470,1549,1500,2089,2401,2551,1049,2426,3081,302,155,695,2464,1403,264,2132,2097,2309,2324,2098,2733,3153,2853,1729,781,1580,385,1454,315,106,1728,547,369,1504,1644,326,809,1352,531,890,2016,1018,1150,1473,2683,580,1302,2079,2234,1804,63,1182,3060,2612,787,2532,401,3216,1057,2715,2997,1610,2425,2941,906,3322,499,613,510,1202,1791,1902,1700,148,2243];

    a[0][1] = [2680,2028,3027,2036,1948,1679,2616,1881,15,3005,2270,1203,3116,2548,2657,665,2969,1089,617,41,3226,2754,1488,33,665,2479,345,3041,1771,2023,3106,1860,820,157,1808,2633,1078,1629,914,2121,1895,2325,1395,2453,2525,320,2476,1114,267,1813,433,2667,1609,1752,3216,1271,2735,253,1851,2985,1589,462,1596,1295,418,1431,472,1819,1488,3253,1023,445,2814,1576,2756,196,1037,907,1411,437,2979,3265,1572,2718,3053,723,1887,2047,1976,756,2194,3048,780,1868,280,1537,1130,1259,286,2194,1051,1856,3239,3276,456,617,2863,1138,3225,2965,2443,2425,941,1714,1310,2477,816,1476,96,2567,600,2577,3167,2899,1448,2478,798,843,2542,1424,2539,811,278,2193,801,1424,1273,1946,622,2668,1529,2920,2875,947,1080,2102,1008,2803,1250,2336,1959,1993,1564,2318,2696,784,2093,2321,2344,1559,1410,795,1831,3092,1129,556,1767,966,2138,307,779,2558,2471,3016,1080,3094,2174,1010,997,2915,2588,244,2172,2205,194,693,2793,1645,3005,2337,407,2137,1906,494,117,1417,2171,2305,3000,2576,1817,1243,629,2321,2254,1936,2020,1647,3086,398,2136,805,2540,3051,1077,3110,1835,3200,337,3016,2457,3179,2869,1463,1921,3045,1650,1875,2966,2313,2140,1712,51,2581,3176,2603,461,2465,2055,557,2730,2653,1315,1358,1920,687,226,3000,1297,831,1897,1036,1770,2430,1532,591];

    a[1][0] = [298,1675,2534,2875,2859,2783,1910,1374,930,1379,1393,585,385,761,3222,855,2012,2650,2876,1262,688,2644,1416,1464,380,2458,453,1480,1846,1874,1052,3318,1186,533,2162,342,413,1084,1648,732,2204,2956,676,967,126,167,1233,2339,2650,3105,518,2762,936,2563,2337,1407,2438,2885,2720,3172,1045,891,3318,2038,971,1618,1349,2475,575,2938,1020,1383,2962,3201,2995,3146,1396,2594,854,548,1667,1824,2254,387,917,1242,573,425,2174,1991,1961,2987,2733,88,1234,3122,318,3239,2676,3113,1768,590,2712,1539,1441,2778,2914,3213,1590,127,186,1884,618,3289,103,3095,2171,2563,2741,2212,2337,1144,978,1441,2710,333,1154,1663,2999,2529,1910,1828,3213,286,2442,1476,2920,2369,2163,1256,1978,377,134,1908,1665,2122,2744,3242,2760,2433,2528,2616,2753,154,1508,1897,217,1850,1946,2431,1129,2343,2008,1003,2262,1446,564,1086,1435,735,2587,2898,1114,96,296,163,1270,2197,783,1565,1440,232,2088,1503,280,1955,3094,590,968,1602,1112,2653,3283,3077,2068,1651,1401,2367,2061,1424,353,2059,1169,3195,2840,2943,2716,1278,2116,2378,2913,2528,2689,2649,3042,1381,2147,2316,2404,3142,3078,1679,3143,432,961,3328,2368,644,123,2830,2874,591,2010,2149,859,904,373,1667,1869,108,104,1726,1196,1398,1823,1829,1316,2640,1103,2410,738,2908,285,2986,752,2956];

    a[1][1] = [1673,730,311,1031,2158,116,1586,660,956,1525,1213,2665,2898,2092,483,1342,1039,3063,3232,3122,1888,2493,491,1947,1845,2685,2891,2107,1236,790,2371,549,104,630,890,858,3034,3138,2594,159,488,1219,1894,2072,2588,2765,106,1105,1138,2312,327,937,1148,1314,1345,2016,2247,544,1387,2701,1279,1843,1604,2713,1247,1879,1020,3071,302,3288,542,686,1590,774,1496,339,1546,2503,2391,2771,2558,3201,1784,844,745,3098,2072,1803,2204,1523,1679,2387,2351,1716,1221,1605,2182,2176,1715,336,502,2866,364,2702,1000,3289,3064,1570,1327,3033,453,2959,1315,1950,1980,2053,283,2169,1308,1725,2181,1194,1883,1440,663,1922,349,2149,385,3270,38,1312,331,2368,666,669,470,2861,1216,2686,2023,1213,3134,2824,2506,2634,3182,1897,2379,1948,477,1925,431,1234,2356,385,2635,2247,3206,1529,563,2834,191,2281,1045,2190,325,3023,2671,2765,2806,3182,402,2457,1813,694,1834,2758,2876,3047,2859,3252,1748,224,2692,1542,2417,3018,1963,2619,1386,2517,1720,25,2273,130,737,1679,47,15,1330,1346,806,2814,2325,737,288,2423,690,2690,2071,827,1190,1246,3020,1506,2375,1224,1270,2821,3124,745,1078,1334,583,171,907,3087,1644,991,1585,2798,2563,758,1574,618,3328,835,1487,2434,848,2501,1769,2880,2852,2708,1279,2273,1910,2799,1771,3187,1623,2733,1155,3300];

    var t[2][n];
    t[0] = [593,698,349,2342,1327,2364,280,1450,575,2436,2284,2044,922,1225,307,1752,1429,2308,713,2802,2443,1765,1625,472,1860,1235,2527,2874,2096,2508,3018,15,610,856,221,362,2885,982,1626,8,2688,576,3254,2827,600,1381,293,1142,1687,3024,2984,1299,2762,771,1887,3207,2451,2750,2660,1304,119,1275,2222,2717,1103,3017,261,28,201,192,939,3001,2548,3229,2096,1624,2038,910,2072,136,1186,495,2665,1389,2434,229,279,189,979,2069,997,2424,2272,1577,138,1009,1148,3311,90,2320,1218,1321,313,2203,474,834,98,1335,426,2533,2418,171,1749,1168,1130,510,796,54,1134,2320,2255,3148,1396,2419,1319,3267,3262,913,2241,1941,1629,1089,356,1281,3131,1046,242,1480,996,1622,2654,2442,1919,2335,301,2554,3092,1277,2066,1140,849,486,2483,810,3312,2354,2715,2106,569,2489,1804,2953,2980,893,51,2488,3228,1527,2069,596,663,590,1817,217,2416,3309,1772,325,1681,34,1765,1765,2357,892,1574,1157,2341,2795,457,1932,1551,1215,2838,1439,2666,2352,1512,3214,1932,105,2224,2455,873,167,1599,2321,563,18,3036,86,1188,340,3176,2071,2657,3122,2741,999,1496,1177,1851,1114,2982,1507,572,3307,2931,2689,1540,3265,2742,213,386,1653,1608,1344,1494,2528,726,2720,591,279,1748,3026,1650,2191,260,1886,2735,2529,2663,2789,799,2284,1249,571];

    t[1] = [2004,1403,727,2372,3033,3201,217,1956,2001,2730,2283,1160,1016,1501,946,34,1850,2278,140,2995,1462,3306,1722,1252,1884,3241,1786,2564,1256,350,2133,1079,2434,2641,2591,1439,629,2408,815,2833,1882,494,1696,1043,597,300,1675,1476,260,1205,407,3113,434,3303,3097,671,3050,1572,2417,2127,970,2723,707,2625,2613,3068,1367,1690,1761,32,1392,2316,3020,1590,237,3124,2087,2277,2436,904,2103,182,1058,139,985,2915,2200,34,996,181,2891,2317,2029,197,1641,252,1314,2564,1144,2028,2447,2278,1189,1433,2548,2433,740,1162,3244,1121,2895,1485,1488,1380,1634,1522,1925,1361,2539,1133,1381,3082,2310,3011,2220,3034,2568,2254,2041,2867,997,1192,1865,1943,1855,2606,1383,45,873,1732,293,1084,768,854,3025,3083,724,1123,2315,2757,2127,2823,693,1230,631,985,64,2294,2438,2202,2884,674,1693,862,8,572,1331,2620,1699,2270,2514,3209,3069,2717,3047,794,31,2235,2942,751,457,2682,961,2963,33,2400,613,2937,1557,1275,1565,3038,2994,1197,1784,1608,2756,205,1452,1150,2457,3276,1693,1919,3276,2226,1892,2797,3036,3184,651,1203,3233,967,3117,518,2737,3118,523,1307,573,1806,667,962,997,129,1945,1630,3214,840,2618,2214,2330,2757,2829,708,1056,457,1892,885,3144,1242,936,916,761,2742,3260,1950,2397,320,822,315,284,2620,2271,143];

    // compute u = A^T * r + e1
    // intermediate values
    signal a00_r0[n];
    signal a01_r1[n];
    signal a10_r0[n];
    signal a11_r1[n];

    a00_r0 <== multiply_nttvec()(a[0][0],r_hat[0]);
    a01_r1 <== multiply_nttvec()(a[0][1],r_hat[1]);
    a10_r0 <== multiply_nttvec()(a[1][0],r_hat[0]);
    a11_r1 <== multiply_nttvec()(a[1][1],r_hat[1]);
    
    signal ATr_hat[2][n];
    for (var i = 0; i < n; i++) {
        ATr_hat[0][i] <== FastAddMod(q)([a00_r0[i],a01_r1[i]]);
        ATr_hat[1][i] <== FastAddMod(q)([a10_r0[i],a11_r1[i]]);
    }

    signal ATr[2][n];
    ATr[0] <== inv_halfNTT()(ATr_hat[0]);
    ATr[1] <== inv_halfNTT()(ATr_hat[1]);

    signal u[2][n];
    for (var i = 0; i < n; i++) {
        u[0][i] <== FastAddMod(q)([ATr[0][i],e1[0][i]]);
        u[1][i] <== FastAddMod(q)([ATr[1][i],e1[1][i]]);
    }

    // check that m is either 0 or 1665
    for (var i = 0; i < n; i++) {
        m[i] * (1665 - m[i]) === 0;
    }

    // compute v = t*r + e2 + m
    // intermediate values
    signal t0_r0[n];
    signal t1_r1[n];

    t0_r0 <== multiply_nttvec()(t[0],r_hat[0]);
    t1_r1 <== multiply_nttvec()(t[1],r_hat[1]);

    signal t_r_hat[n];
    for (var i = 0; i < n; i++) {
        t_r_hat[i] <== FastAddMod(q)([t0_r0[i],t1_r1[i]]);
    }

    signal t_r[n];
    t_r <== inv_halfNTT()(t_r_hat);

    signal t_r_e2[n];
    for (var i = 0; i < n; i++) {
        t_r_e2[i] <== FastAddMod(q)([t_r[i],e2[i]]);
    }

    signal v[n];
    for (var i = 0; i < n; i++) {
        v[i] <== FastAddMod(q)([t_r_e2[i],m[i]]);
    }

    signal compressed_u[2][n];
    signal compressed_v[n];

    for (var i = 0; i < n; i++) {
        compressed_u[0][i] <== ModSwitchInt(1<<10, q)(u[0][i]);
        compressed_u[1][i] <== ModSwitchInt(1<<10, q)(u[1][i]);
        compressed_v[i] <== ModSwitchInt(1<<4, q)(v[i]);
    }

    // convert to bytes according to the spec to get c1 and c2
    signal c1[n]; // 256*2 entries in 2^10 amounts to 640 bytes
    signal c2[n]; // 256*1 entries in 2^4 amounts to 128 bytes

    // convert compressed_u and compressed_v to bits using Num2Bits
    signal compressed_u_bits[2*n*10];
    signal compressed_v_bits[n*4];

    for (var i = 0; i < n; i++) {
        var out[10] = Num2Bits(10)(compressed_u[0][i]);
        for (var j = 0; j < 10; j++) {
            compressed_u_bits[10*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[10] = Num2Bits(10)(compressed_u[1][i]);
        for (var j = 0; j < 10; j++) {
            compressed_u_bits[10*n + 10*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[4] = Num2Bits(4)(compressed_v[i]);
        for (var j = 0; j < 4; j++) {
            compressed_v_bits[4*i + j] <== out[j];
        }
    }
    
    // compute the SHA256 hash of the concatenation of c1 and c2
    signal sha256_input[2*n*10 + n*4];
    for (var i = 0; i < 2*n*10; i++) {
        sha256_input[i] <== compressed_u_bits[i];
    }
    for (var i = 0; i < n*4; i++) {
        sha256_input[2*n*10 + i] <== compressed_v_bits[i];
    }

    // convert to bytes
    signal sha256_input_bytes[(2*n*10 + n*4)/8];
    for (var i = 0; i < (2*n*10 + n*4)/8; i++) {
        sha256_input_bytes[i] <== Bits2Num(8)(
            [sha256_input[8*i], 
            sha256_input[8*i+1], 
            sha256_input[8*i+2], 
            sha256_input[8*i+3], 
            sha256_input[8*i+4], 
            sha256_input[8*i+5], 
            sha256_input[8*i+6], 
            sha256_input[8*i+7]]
        );
    }

    signal h[32] <== Sha256_hash_bytes_digest((2*n*10 + n*4)/8)(sha256_input_bytes);

    signal output h0;
    signal output h1;

    var sum = 0;
    for (var i = 0; i < 16; i++) {
        sum += h[i]*(1<<(8*i));
    }
    h0 <== sum;

    sum = 0;
    for (var i = 16; i < 32; i++) {
        sum += h[i]*(1<<(8*(i-16)));
    }
    h1 <== sum;
}