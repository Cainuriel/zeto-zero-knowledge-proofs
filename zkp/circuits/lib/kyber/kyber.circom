// Copyright 2025 Guru Vamsi Policharla
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
pragma circom 2.2.2;

include "half_ntt.circom";
include "sha2/sha256/sha256_hash_bytes.circom";
include "sha3/sha3_bits.circom";

template samplePolyCBD(l,eta) {
    var n = 256;
    var q = 3329;
    assert(l == 2*eta*n);

    signal input b[l];
    signal output a[n];

    var x = 0;
    var y = 0;
    for(var i = 0; i < n; i++) {
        for(var j = 0; j < eta; j++) {
            x += b[2*eta*i + j];
            y += b[2*eta*i + j + eta];
        }
        a[i] <== FastSubMod(q)([x,y]);
        x = 0;
        y = 0;
    }
}
    

template kpke_enc() {
    var q = 3329;
    var n = 256;
    var k = 2;

    var eta1 = 3;
    var eta2 = 2;
    var du = 10;
    var dv = 4;

    var l1 = 2*eta1*n;
    var l2 = 2*eta2*n;

    signal input randomness[n];
    signal input m[n]; // entries in {0,1}

    /*
        Sample y, e1, e2 as follows:
        y  is a 512-byte string, generated with two PRF calls
        e1 is a 512-byte string, generated with two PRF calls
        e2 is a 256-byte string, generated with a single PRF call
        In the K-PKE spec, N is incremented for each PRF call.
        We manually increment N by defining variables 'zero' through 'four.'
    */

    var zero[8] = [0,0,0,0,0,0,0,0];
    var one[8] = [1,0,0,0,0,0,0,0];
    var two[8] = [0,1,0,0,0,0,0,0];
    var three[8] = [1,1,0,0,0,0,0,0];
    var four[8] = [0,0,1,0,0,0,0,0];

    signal shake_input_bits[5][33*8];
    for (var i=0; i<32*8; i++) {
        shake_input_bits[0][i] <== randomness[i];
        shake_input_bits[1][i] <== randomness[i];
        shake_input_bits[2][i] <== randomness[i];
        shake_input_bits[3][i] <== randomness[i];
        shake_input_bits[4][i] <== randomness[i];
    }
    for (var i=0; i<8; i++) {
        shake_input_bits[0][i+32*8] <== zero[i];
        shake_input_bits[1][i+32*8] <== one[i];
        shake_input_bits[2][i+32*8] <== two[i];
        shake_input_bits[3][i+32*8] <== three[i];
        shake_input_bits[4][i+32*8] <== four[i];
    }
    
    signal prf_y[2][l1]; 
    prf_y[0] <== SHAKE256(33*8, l1)(shake_input_bits[0]);
    prf_y[1] <== SHAKE256(33*8, l1)(shake_input_bits[1]);

    signal prf_e1[2][l2];
    prf_e1[0] <== SHAKE256(33*8, l2)(shake_input_bits[2]);
    prf_e1[1] <== SHAKE256(33*8, l2)(shake_input_bits[3]);

    signal prf_e2[l2];
    prf_e2 <== SHAKE256(33*8, l2)(shake_input_bits[4]);
    
    signal y[2][n];
    signal e1[2][n];
    signal e2[n];

    y[0] <== samplePolyCBD(l1,eta1)(prf_y[0]);
    y[1] <== samplePolyCBD(l1,eta1)(prf_y[1]);

    e1[0] <== samplePolyCBD(l2,eta2)(prf_e1[0]);
    e1[1] <== samplePolyCBD(l2,eta2)(prf_e1[1]);

    e2 <== samplePolyCBD(l2,eta2)(prf_e2);

    signal y_hat[2][n];
    y_hat[0] <== halfNTT()(y[0]);
    y_hat[1] <== halfNTT()(y[1]);

    // NTT-ed and transposed public key matrix A
    var a[2][2][n];
    a[0][0] = [1851,1047,480,3184,2402,2286,783,3004,503,2503,401,265,605,3034,559,3152,2911,90,3208,2465,1688,144,2571,1709,2389,1477,194,1869,3189,246,1652,1823,301,2913,3171,296,549,1441,583,1617,1535,1639,3071,1810,639,1504,1078,1718,1491,3207,1899,2282,191,959,1552,2148,1840,2017,2925,1772,2900,355,2665,683,1353,304,2314,274,3271,2421,2696,874,363,3159,1646,3136,1269,2843,2224,2818,1296,132,2298,2670,855,1761,443,1709,81,224,1309,1518,868,1448,695,2486,2928,2611,1167,2129,470,587,2880,1683,504,2374,1983,1514,1906,2567,1869,2440,1075,1475,870,739,3281,826,1629,1902,1615,109,867,622,1375,1729,2097,1831,770,2978,675,3027,1110,1485,149,1772,2244,2339,1873,68,906,825,2609,1566,259,2438,1973,1162,2183,3192,2533,3226,1788,532,2428,1804,3165,2752,1178,1995,281,1560,47,1491,1635,472,1042,2162,469,3134,1495,737,82,1487,3315,182,951,2701,1017,2688,2382,1210,1941,2152,1489,1217,2020,3148,41,2483,2530,2255,499,298,1660,714,3025,2491,62,2029,1357,743,1647,1518,2809,3296,2945,2455,1446,515,1897,2363,62,2414,1856,736,1761,1361,1620,2290,729,2073,3014,2964,1389,2221,2335,2325,1806,963,203,1261,2042,1583,621,2811,129,1050,2308,1636,2290,2388,2301,1024,3198,3293,1777,953,2048,2102,2619,796,2729,2702,588,1134];

    a[0][1] = [2378,1375,1380,3057,101,2252,3328,296,2069,1957,332,1692,713,1127,261,1227,1899,3093,2050,1782,3182,635,1221,2752,2801,2614,2197,3323,7,261,1915,373,782,2941,620,2377,1735,911,1727,3126,2358,1235,987,2991,2529,3056,50,1064,2699,1764,2078,1322,564,731,2909,3322,41,1765,953,2558,1435,736,2396,3163,375,2523,2210,74,1490,443,1577,1289,2249,2775,1116,3114,2081,2862,1902,3079,376,2897,829,2141,1938,1333,910,1556,2072,27,2904,1860,3095,2449,1527,1457,2143,124,981,1679,571,2120,1286,9,554,1378,405,2119,2474,122,1201,2554,2839,3212,3287,1647,1913,1095,846,1505,3151,1602,2477,996,919,3056,3236,1361,1100,3079,8,114,1577,550,1266,2783,852,1680,688,1781,1547,2503,2624,559,278,885,2423,425,1308,1566,615,1271,131,3113,469,2497,334,1996,26,697,724,3187,1108,1917,664,804,1952,2394,879,1652,2665,2461,2974,1805,833,3325,717,2506,846,350,823,3016,342,1584,2665,2824,1767,1353,1610,848,391,2005,1597,2613,1484,2892,2811,1618,63,1071,923,1729,2002,397,168,1415,3098,2273,1307,1243,1555,791,931,1408,2828,95,3188,702,478,516,1045,1914,2029,1662,3101,2573,2767,3193,1987,1956,203,189,2553,1918,624,1351,1797,527,2732,1785,886,1109,2832,3217,257,1602,2783,856,1290,49,1046,2115,1259,2748,2877,2999];

    a[1][0] = [1532,1073,3078,830,2923,1144,1978,3304,1491,2854,768,1980,2875,2642,192,1212,2515,1243,1083,2988,2080,3210,2316,1345,3137,1957,3152,1030,389,1037,613,2233,2781,3111,2143,843,1791,913,1349,475,198,3123,2003,3099,22,2087,464,251,826,356,478,888,900,2456,348,502,1796,884,2386,3148,3025,1133,1697,1586,736,2458,1356,2255,3092,2488,1101,377,2441,849,1707,3071,711,2189,556,2082,41,2060,1076,1377,563,2586,2519,1981,1022,623,1117,2659,2049,1654,2995,1895,2305,2371,2365,2468,1432,1928,69,2526,1892,2161,1827,2263,1141,880,479,3164,2798,3154,1883,2895,2895,2972,2720,3302,672,2030,328,1928,729,3175,1981,1643,156,2793,2010,903,557,2136,142,2919,1838,1412,1867,2075,493,2258,794,1953,1462,2301,96,2020,1823,2326,362,2079,3173,1325,113,2039,2560,2418,992,2238,1655,1856,1658,1776,728,2933,1263,2700,742,1382,1266,20,332,220,2872,512,360,1804,1127,100,2785,342,1108,3169,180,1742,2911,3305,2986,3086,146,1062,0,147,1896,757,1143,2085,1744,1789,1843,2704,683,898,3040,1441,469,3103,2171,3092,3055,387,382,2729,960,138,2026,1477,2319,1055,6,3103,616,223,541,1602,662,1667,1100,2585,1037,2537,715,3303,1260,1840,2617,498,2982,2764,1544,138,844,2679,800,623,2261,1714,1879,1587,715,1092,1357,2276,2947,2689];

    a[1][1] = [606,3134,2040,3104,2589,48,318,1418,2779,434,3097,856,1599,403,1434,3325,2132,1064,2759,1702,937,769,39,1858,2578,2425,1180,123,32,223,1519,2916,1376,1117,500,416,2101,2549,2510,1915,612,1456,2767,2736,1772,1662,3260,3215,166,2541,1475,1933,523,1691,2314,2039,2731,510,1852,1308,36,1162,926,1037,2948,718,2176,1165,2993,2969,2375,1532,1583,1938,2053,3185,924,2825,1870,2971,1609,1309,2784,2023,752,111,750,97,3261,2137,2669,2743,2137,126,2098,1098,2779,1771,1268,674,1275,3009,337,1422,477,678,835,2814,2120,3207,3116,435,328,2390,2392,1708,623,953,1006,2063,1483,497,3213,1453,1442,79,981,1764,553,2912,2472,191,1828,2328,1131,517,3325,1071,1576,410,2892,45,636,2876,2908,1191,999,49,328,2456,3049,3324,432,1654,2569,2240,1761,2871,1352,864,484,3226,3016,0,695,1770,1152,200,2121,2356,2929,786,316,2921,193,1597,4,2734,1610,1041,109,736,2794,1194,617,1422,2607,1922,2991,2871,706,2556,490,962,2317,2937,2307,723,118,350,454,96,2679,1616,1082,711,1426,838,678,648,1087,867,686,2272,1305,432,3198,2611,117,1209,610,786,1400,1122,3309,1353,1516,2285,2779,2449,188,513,2277,1388,409,1719,983,1273,305,2406,2178,2161,859,1742,254,1624,1749,3154,1275,0,1646,1159,1416,518,2361,3272];
    
    var t[2][n];
    t[0] = [2304,14,1485,913,1003,117,2277,1881,863,2219,1299,2373,136,898,3276,2637,2642,2220,792,9,1490,37,2070,3271,173,289,441,2008,3321,571,2195,1087,2298,3017,2894,2693,830,3073,1888,1092,661,1760,307,1252,1788,455,2179,25,1958,280,1508,732,1224,97,1388,2472,3156,2107,2229,961,2477,2506,3263,1151,524,926,1099,2599,1267,135,593,3162,2528,1625,991,2687,3222,345,10,200,415,541,655,2999,1077,447,147,2487,1301,2731,2812,742,2626,3308,2223,2785,1337,2892,575,2573,2961,2068,3026,2175,910,2222,2088,3102,1275,2784,1987,412,1477,51,2778,3258,1512,561,2983,800,902,116,1330,1000,1983,2277,2776,519,115,3118,436,1904,464,918,3243,1316,1629,1813,2599,1620,590,453,3094,770,666,2051,309,2863,768,1015,703,694,2488,1364,1513,2359,215,3301,1164,332,1348,1293,1037,1811,2051,1756,247,175,1137,1581,2816,1791,1453,2116,2312,1761,429,300,1705,1622,2420,41,2417,2407,1348,2020,2614,1240,2076,78,1580,1179,1223,2669,587,1891,3266,2129,2299,2734,508,1421,1042,3005,933,3193,1272,3045,2476,3178,1772,2145,2961,1091,125,565,2430,2095,2886,1028,1475,1880,1922,2525,2675,2676,2862,2081,3007,1316,1463,2738,2386,1857,604,2431,1299,2633,576,354,1805,387,1533,962,2452,419,379,2856,751,2106,356,2308,539,2352,871,3275];

    t[1] = [408,2841,639,543,3166,2400,2206,2679,1340,331,2734,1270,361,2612,1078,2078,812,198,2017,1898,3039,2712,726,3053,3249,2242,2651,3253,2179,2331,1157,1056,1686,1411,3322,2711,2648,1019,2461,3217,2086,162,3185,1438,1612,1965,1832,2961,3220,2827,1612,2545,2407,2520,3204,401,3040,227,2058,1236,848,1600,3093,1978,946,677,886,2545,1995,1794,126,626,1883,2663,867,3149,2032,1073,618,1925,2287,2163,1537,8,32,3161,1689,548,3082,950,1883,647,2443,1690,858,2823,1374,999,568,3147,1988,67,1021,69,987,1622,36,800,1486,3055,3107,782,1792,244,3117,350,1558,696,2463,555,1091,717,1515,709,3050,2298,2494,3164,1048,538,2330,251,3201,1644,489,2556,924,2943,2529,3010,598,281,32,1563,2632,3046,1446,107,492,531,648,1101,476,2269,3059,887,1933,246,558,3180,1320,547,2732,2955,255,1611,1191,3083,1641,1118,2578,850,3036,2238,1758,2599,67,2517,3066,3157,1426,23,356,1510,2546,784,1929,154,709,3219,157,2581,2143,1693,2408,2194,1100,111,1451,809,275,2099,1663,2443,1511,2134,2406,917,2464,2709,1561,439,1790,2660,2453,1474,3057,1190,1342,2217,1288,115,234,1439,2472,339,1073,1520,1565,1122,1594,672,490,1012,549,2707,1545,2904,633,1515,3042,2389,2336,1439,2642,521,2602,1695,357,367,1033,2504,923,1935,924,1954];

    // compute u = NTTinv(A^T * y) + e1
    // intermediate values
    signal a00_y0[n];
    signal a01_y1[n];
    signal a10_y0[n];
    signal a11_y1[n];

    a00_y0 <== multiply_nttvec()(a[0][0],y_hat[0]);
    a01_y1 <== multiply_nttvec()(a[0][1],y_hat[1]);
    a10_y0 <== multiply_nttvec()(a[1][0],y_hat[0]);
    a11_y1 <== multiply_nttvec()(a[1][1],y_hat[1]);
    
    signal ATy_hat[2][n];
    for (var i = 0; i < n; i++) {
        ATy_hat[0][i] <== FastAddMod(q)([a00_y0[i],a01_y1[i]]);
        ATy_hat[1][i] <== FastAddMod(q)([a10_y0[i],a11_y1[i]]);
    }

    signal ATy[2][n];
    ATy[0] <== inv_halfNTT()(ATy_hat[0]);
    ATy[1] <== inv_halfNTT()(ATy_hat[1]);

    signal u[2][n];
    for (var i = 0; i < n; i++) {
        u[0][i] <== FastAddMod(q)([ATy[0][i],e1[0][i]]);
        u[1][i] <== FastAddMod(q)([ATy[1][i],e1[1][i]]);
    }

    // compute v = NTTinv(t*y) + e2 + m
    // intermediate values
    signal t0_y0[n];
    signal t1_y1[n];

    t0_y0 <== multiply_nttvec()(t[0],y_hat[0]);
    t1_y1 <== multiply_nttvec()(t[1],y_hat[1]);

    signal t_y_hat[n];
    for (var i = 0; i < n; i++) {
        t_y_hat[i] <== FastAddMod(q)([t0_y0[i],t1_y1[i]]);
    }

    signal t_y[n];
    t_y <== inv_halfNTT()(t_y_hat);

    signal t_y_e2[n];
    for (var i = 0; i < n; i++) {
        t_y_e2[i] <== FastAddMod(q)([t_y[i],e2[i]]);
    }

    signal m_compress[256];
    for (var i = 0; i < 256; i++) {
        m_compress[i] <== m[i] * 1665;
    }

    signal v[n];
    for (var i = 0; i < n; i++) {
        v[i] <== FastAddMod(q)([t_y_e2[i],m_compress[i]]);
    }

    signal compressed_u[2][n];
    signal compressed_v[n];

    for (var i = 0; i < n; i++) {
        compressed_u[0][i] <== ModSwitchInt(1<<du, q)(u[0][i]);
        compressed_u[1][i] <== ModSwitchInt(1<<du, q)(u[1][i]);
        compressed_v[i] <== ModSwitchInt(1<<dv, q)(v[i]);
    }

    // convert to bytes according to the spec to get c1 and c2
    signal c1[k*n*du]; // 256*2 entries in 2^10 amounts to 640 bytes
    signal c2[n*dv]; // 256*1 entries in 2^4 amounts to 128 bytes

    // convert compressed_u and compressed_v to bits using Num2Bits
    for (var i = 0; i < n; i++) {
        var out[du] = Num2Bits(du)(compressed_u[0][i]);
        for (var j = 0; j < du; j++) {
            c1[du*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[du] = Num2Bits(du)(compressed_u[1][i]);
        for (var j = 0; j < du; j++) {
            c1[du*n + du*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[dv] = Num2Bits(dv)(compressed_v[i]);
        for (var j = 0; j < dv; j++) {
            c2[dv*i + j] <== out[j];
        }
    }

    // output ciphertext
    signal output c[n*(k*du + dv)];
    for (var i = 0; i < k*n*du; i++) {
        c[i] <== c1[i];
    }
    
    for (var i = 0; i < n*dv; i++) {
        c[i + k*n*du] <== c2[i];
    }

    // // compute the SHA256 hash of the concatenation of c1 and c2
    // signal sha256_input[k*n*du + n*dv];
    // for (var i = 0; i < k*n*du; i++) {
    //     sha256_input[i] <== compressed_u_bits[i];
    // }
    // for (var i = 0; i < n*dv; i++) {
    //     sha256_input[k*n*du + i] <== compressed_v_bits[i];
    // }

    // // convert to bytes
    // signal sha256_input_bytes[(k*n*du + n*dv)/8];
    // for (var i = 0; i < (k*n*du + n*dv)/8; i++) {
    //     sha256_input_bytes[i] <== Bits2Num(8)(
    //         [sha256_input[8*i], 
    //         sha256_input[8*i+1], 
    //         sha256_input[8*i+2], 
    //         sha256_input[8*i+3], 
    //         sha256_input[8*i+4], 
    //         sha256_input[8*i+5], 
    //         sha256_input[8*i+6], 
    //         sha256_input[8*i+7]]
    //     );
    // }

    // signal h[32] <== Sha256_hash_bytes_digest((k*n*du + n*dv)/8)(sha256_input_bytes);

    // signal output h0;
    // signal output h1;

    // var sum = 0;
    // for (var i = 0; i < 16; i++) {
    //     sum += h[i]*(1<<(8*i));
    // }
    // h0 <== sum;

    // sum = 0;
    // for (var i = 16; i < 32; i++) {
    //     sum += h[i]*(1<<(8*(i-16)));
    // }
    // h1 <== sum;
}