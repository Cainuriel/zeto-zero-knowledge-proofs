// Copyright 2025 Guru Vamsi Policharla
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
pragma circom 2.2.2;

include "half_ntt.circom";
include "sha2/sha256/sha256_hash_bytes.circom";
include "sha3/sha3_bits.circom";

template samplePolyCBD(l,eta) {
    var n = 256;
    var q = 3329;
    assert(l == 2*eta*n);

    signal input b[l];
    signal output a[n];

    var x = 0;
    var y = 0;
    for(var i = 0; i < n; i++) {
        for(var j = 0; j < eta; j++) {
            x += b[2*eta*i + j];
            y += b[2*eta*i + j + eta];
        }
        a[i] <== FastSubMod(q)([x,y]);
        x = 0;
        y = 0;
    }
}
    

template kpke_enc() {
    var q = 3329;
    var n = 256;
    var k = 2;

    var eta1 = 3;
    var eta2 = 2;
    var du = 10;
    var dv = 4;

    var l1 = 2*eta1*n;
    var l2 = 2*eta2*n;

    signal input randomness[n];
    signal input m[n]; // entries in {0,1}

    /*
        Sample y, e1, e2 as follows:
        y  is a 512-byte string, generated with two PRF calls
        e1 is a 512-byte string, generated with two PRF calls
        e2 is a 256-byte string, generated with a single PRF call
        In the K-PKE spec, N is incremented for each PRF call.
        We manually increment N by defining variables 'zero' through 'four.'
    */

    var zero[8] = [0,0,0,0,0,0,0,0];
    var one[8] = [1,0,0,0,0,0,0,0];
    var two[8] = [0,1,0,0,0,0,0,0];
    var three[8] = [1,1,0,0,0,0,0,0];
    var four[8] = [0,0,1,0,0,0,0,0];

    signal shake_input_bits[5][33*8];
    for (var i=0; i<32*8; i++) {
        shake_input_bits[0][i] <== randomness[i];
        shake_input_bits[1][i] <== randomness[i];
        shake_input_bits[2][i] <== randomness[i];
        shake_input_bits[3][i] <== randomness[i];
        shake_input_bits[4][i] <== randomness[i];
    }
    for (var i=0; i<8; i++) {
        shake_input_bits[0][i+32*8] <== zero[i];
        shake_input_bits[1][i+32*8] <== one[i];
        shake_input_bits[2][i+32*8] <== two[i];
        shake_input_bits[3][i+32*8] <== three[i];
        shake_input_bits[4][i+32*8] <== four[i];
    }
    
    signal prf_y[2][l1]; 
    prf_y[0] <== SHAKE256(33*8, l1)(shake_input_bits[0]);
    prf_y[1] <== SHAKE256(33*8, l1)(shake_input_bits[1]);

    signal prf_e1[2][l2];
    prf_e1[0] <== SHAKE256(33*8, l2)(shake_input_bits[2]);
    prf_e1[1] <== SHAKE256(33*8, l2)(shake_input_bits[3]);

    signal prf_e2[l2];
    prf_e2 <== SHAKE256(33*8, l2)(shake_input_bits[4]);
    
    signal y[2][n];
    signal e1[2][n];
    signal e2[n];

    y[0] <== samplePolyCBD(l1,eta1)(prf_y[0]);
    y[1] <== samplePolyCBD(l1,eta1)(prf_y[1]);

    e1[0] <== samplePolyCBD(l2,eta2)(prf_e1[0]);
    e1[1] <== samplePolyCBD(l2,eta2)(prf_e1[1]);

    e2 <== samplePolyCBD(l2,eta2)(prf_e2);

    signal y_hat[2][n];
    y_hat[0] <== halfNTT()(y[0]);
    y_hat[1] <== halfNTT()(y[1]);

    // NTT-ed and transposed public key matrix A
    var a[2][2][n];
    a[0][0] = [1482,97,2726,2790,2936,2207,330,2441,406,282,3171,683,1147,2224,2384,3182,1922,1167,874,15,16,2315,1348,2541,2964,1207,1989,2863,3047,1940,134,938,998,3151,1451,2507,1937,1051,2930,494,2019,2526,387,3045,446,610,3181,2924,2128,428,2601,1413,1848,1956,2911,3127,1871,2811,1655,1837,1775,755,3134,2782,2133,519,2360,1193,3310,384,2666,2080,1119,584,3194,3001,1460,836,1368,2193,848,1386,1043,1793,891,2843,1114,2706,2284,2992,2313,1228,1773,1814,2417,1019,2192,1236,1046,2425,971,2733,2429,2437,229,3067,2979,1795,1896,1452,309,2902,1080,1009,662,500,2259,1720,2712,1731,895,376,2139,1899,2474,2224,759,1073,25,1952,223,310,1114,2604,697,3122,1642,575,3178,1464,2445,1630,1506,1431,616,1808,3236,1749,2719,3057,2250,2372,3173,1898,2591,1107,1390,1486,3205,2030,2721,260,1895,113,2611,2038,353,838,192,2370,1621,2850,1007,1759,2927,846,2925,2871,2509,481,2594,2699,2651,1511,2270,2072,2196,1876,222,2754,1951,2446,148,1730,332,1913,865,367,2266,322,3179,3209,1989,201,1185,2195,158,2063,2305,2273,2005,2921,7,2274,497,2501,922,3280,2899,453,2597,1532,516,1244,187,2160,538,3047,482,2643,2897,874,1084,547,2486,1966,2317,261,2836,1576,1870,2907,2023,127,2695,917,372,1717,1052,1045,1531,1120,1409,1289,697,3099];

    a[0][1] = [2622,962,2769,3245,55,2458,1528,1411,2845,707,0,2674,1602,839,3252,1140,3244,1615,1165,1777,235,2888,964,2459,2724,3041,1854,2216,142,2970,1509,3161,1955,646,1107,2234,3300,1162,3167,473,1173,265,2975,2241,1689,2997,811,119,1061,2733,671,1019,1200,697,1226,2276,654,253,839,1811,2984,989,104,3318,1369,2247,678,3106,3068,281,2675,168,418,1789,292,2003,3168,3070,854,2919,581,1454,3311,473,3230,1815,2637,556,3039,1644,3180,1679,1137,139,2275,1280,637,2782,1382,1845,1825,1596,2208,3111,1793,333,2752,1666,1885,1023,1495,1834,1086,1425,1954,1680,4,817,720,2515,3014,2215,655,1084,2650,739,794,1557,118,997,616,352,2635,3206,333,979,1255,288,3080,2552,2306,2530,1267,1579,3052,2002,3085,2086,1267,2128,3253,800,1642,2664,299,3177,1999,2745,1790,297,1379,1626,262,2206,2341,2287,3149,3247,3007,1996,3141,2884,856,3027,690,1441,1937,1759,2523,1252,2045,1862,505,2015,951,2522,1674,1168,2216,366,2945,1784,3197,1296,91,1872,1176,2271,807,1107,1439,701,1728,574,781,1660,1036,2886,3063,2245,2195,156,825,2393,968,1153,534,3288,654,2824,669,812,2374,578,1982,2377,2570,721,2929,392,1189,3184,22,1171,2591,404,372,207,108,1484,1950,1958,2951,832,2771,2415,2572,63,1249,1154,1874,2759,2618,675,2726,3028];

    a[1][0] = [2726,2014,94,2919,2119,285,2514,2741,51,1250,850,1445,3048,613,3156,3056,545,1043,458,911,2744,2533,2179,688,2791,989,2598,2083,2452,2588,796,796,2941,2278,363,3192,162,1224,2216,1936,2880,2216,489,3198,3064,3284,1367,687,974,1947,321,1031,1733,1276,1597,3060,2985,1288,1587,634,1360,897,977,786,564,3087,1308,1694,1023,1062,1036,1879,772,1087,1794,654,2755,2851,1807,1429,2246,242,2589,2674,1806,294,1415,1615,1257,2305,1230,2221,1279,2005,1194,556,2012,847,1257,168,1776,2738,1783,2791,2301,443,314,1921,1275,913,52,2535,1240,38,713,2780,1379,235,2394,1301,646,3201,1395,936,2849,1890,2508,3104,3115,235,601,1838,972,1772,710,1328,1149,1418,922,90,918,2979,919,880,739,2175,108,1985,730,663,455,2727,3186,2990,2697,3037,134,2844,1339,471,2791,2846,2773,605,1935,2610,419,1915,737,2687,1094,2112,1249,1363,403,2816,1388,1658,2490,2462,507,275,1667,1669,2288,2637,2974,612,1329,1432,2902,1220,2247,546,1651,629,2382,3193,3218,785,1908,951,241,3128,1499,2034,1332,1634,1447,540,1547,1184,1468,618,1348,3180,437,1115,1170,2273,215,1518,434,2304,2160,897,273,317,2803,3282,564,2620,1171,2895,327,3265,2640,1957,78,3261,419,2108,971,2816,866,2788,1381,1340,749,1276,2207,1038,654,2332,1968,3107];

    a[1][1] = [2811,1049,3260,2912,1266,1488,2242,2897,1314,2852,1877,549,256,3221,1670,910,659,1398,1155,1447,1364,2644,49,1030,1470,1011,347,2739,332,3178,1033,66,1540,3083,416,801,519,1455,1832,1419,3210,1499,174,2731,2199,2592,665,1569,441,146,3278,2268,972,2317,429,399,2490,1751,1383,3264,2566,3069,1532,709,1474,613,3163,1573,2278,3110,2552,1334,1815,242,2890,3232,1413,327,496,1154,257,1969,277,1873,2130,755,2459,1855,2936,201,1865,2700,427,2599,1885,18,1689,2433,649,878,3014,795,476,1274,1628,1309,3260,2714,3209,3293,1079,2491,1156,2724,3147,1822,261,1509,912,2358,2150,328,783,2829,2701,3116,1382,2514,498,3002,425,689,3024,2980,1118,1196,2269,1238,1399,223,2110,725,2038,1978,678,123,1757,1588,2301,2718,1214,129,269,464,2594,3167,1433,890,2957,2052,373,2172,2420,484,3086,1839,1525,2859,1407,879,2941,2130,429,2479,3181,2080,1082,94,1964,2103,550,1361,71,2726,193,1041,2015,2460,2723,718,174,3147,2246,881,178,3187,652,1372,2402,356,514,2365,239,1586,3252,792,2851,3256,1650,1132,223,3121,1032,2749,1845,2212,1018,1575,1707,996,1731,1940,1783,74,2505,1412,1338,658,756,2285,950,1787,2628,2519,3256,3048,2677,3261,1427,2829,2186,1193,1889,1989,1352,59,1961,1359,2662,280,3216,1547,2378,398,323,3149];
    
    var t[2][n];
    t[0] = [525,1749,110,3194,1794,1227,221,2080,2507,285,1988,2724,2150,514,1739,1763,44,840,2938,1364,2374,908,2084,486,974,803,2431,2539,1331,3313,3270,919,3087,2165,1689,304,711,227,2973,2592,819,638,1914,934,71,2636,1484,19,3055,2739,2370,2050,3128,2992,2020,3230,2999,1931,680,2618,301,2456,2335,523,1294,3058,2675,3133,1722,1881,3317,2993,1502,2272,2322,1011,3190,1490,174,413,2053,2125,213,909,1964,92,1833,2126,1775,2091,3052,1203,1492,1688,2824,3322,1675,1825,304,1461,18,3212,2836,2216,2749,2296,1849,2634,1017,2229,1421,3262,1270,2953,2259,1217,2065,2309,2068,2528,1789,736,157,594,1252,441,1838,2086,2548,3075,199,1060,1224,1957,2781,2040,2738,1888,2341,2256,2135,665,2448,1190,2712,2385,3050,1408,1650,1565,1683,2869,449,2515,3103,2938,1941,1183,1010,2826,2524,2345,165,2524,1450,2453,1730,2162,666,1595,2476,391,2996,822,881,2760,324,3108,2402,2720,3281,322,932,964,2849,482,929,208,176,2851,499,485,401,2108,681,1948,1444,2338,1579,1017,1250,989,2353,2205,3148,1222,1228,1351,698,1342,70,2199,2051,2967,334,2454,1100,1438,849,1636,1975,3039,1051,2203,2625,2474,954,568,713,2727,3142,1002,1772,1840,2295,1311,2907,847,2304,134,2119,779,3011,1702,3120,1349,1954,1997,506,1592,768,1965,1,660,2182,1360];

    t[1] = [3116,3286,1180,506,1186,1921,519,1129,1980,1093,607,731,3191,2261,1971,2221,2641,2749,60,2717,3240,1256,1239,2818,1015,1816,1572,1718,2791,1387,954,776,2327,1804,3256,1464,1985,873,1133,2468,1208,1788,1940,656,1592,1513,2604,1397,101,1193,2012,2904,875,1261,2185,2232,536,2128,472,2226,1906,2349,2085,1978,2497,2145,2538,66,2029,2155,1561,2666,214,3190,997,73,2101,915,2507,2666,168,121,1155,2020,764,2045,1769,271,462,2139,3079,3027,782,2618,1809,2195,1559,1479,1047,1982,1646,1211,2015,383,2535,2939,2774,924,1681,1489,2712,1291,1504,307,718,603,1306,98,609,1155,750,2332,2476,1368,2089,2910,2255,565,2786,1776,1195,1178,583,141,3053,1620,2917,2592,1833,3092,1293,1534,2742,4,2381,1271,697,1119,442,1451,643,49,1150,2784,97,859,2840,3298,1032,1567,1877,950,2786,2720,3035,454,3020,1635,3303,3001,2592,1826,1448,2759,3062,1380,2406,369,1896,1320,1040,2380,430,3328,2090,1265,3023,555,3222,69,1976,774,1037,2505,3001,564,1664,1578,3173,997,1791,1330,1590,2247,274,2296,1746,867,416,941,3165,2670,3105,684,20,2391,1349,2667,488,1415,2183,1163,330,2556,2524,2252,2662,1434,1947,353,2694,113,2553,1056,3017,1788,2204,2264,815,1480,2987,1472,742,3278,363,720,382,2705,940,221,2084,1082,362,2054,2423,2630];

    // compute u = NTTinv(A^T * y) + e1
    // intermediate values
    signal a00_y0[n];
    signal a01_y1[n];
    signal a10_y0[n];
    signal a11_y1[n];

    a00_y0 <== multiply_nttvec()(a[0][0],y_hat[0]);
    a01_y1 <== multiply_nttvec()(a[0][1],y_hat[1]);
    a10_y0 <== multiply_nttvec()(a[1][0],y_hat[0]);
    a11_y1 <== multiply_nttvec()(a[1][1],y_hat[1]);
    
    signal ATy_hat[2][n];
    for (var i = 0; i < n; i++) {
        ATy_hat[0][i] <== FastAddMod(q)([a00_y0[i],a01_y1[i]]);
        ATy_hat[1][i] <== FastAddMod(q)([a10_y0[i],a11_y1[i]]);
    }

    signal ATy[2][n];
    ATy[0] <== inv_halfNTT()(ATy_hat[0]);
    ATy[1] <== inv_halfNTT()(ATy_hat[1]);

    signal u[2][n];
    for (var i = 0; i < n; i++) {
        u[0][i] <== FastAddMod(q)([ATy[0][i],e1[0][i]]);
        u[1][i] <== FastAddMod(q)([ATy[1][i],e1[1][i]]);
    }

    // compute v = NTTinv(t*y) + e2 + m
    // intermediate values
    signal t0_y0[n];
    signal t1_y1[n];

    t0_y0 <== multiply_nttvec()(t[0],y_hat[0]);
    t1_y1 <== multiply_nttvec()(t[1],y_hat[1]);

    signal t_y_hat[n];
    for (var i = 0; i < n; i++) {
        t_y_hat[i] <== FastAddMod(q)([t0_y0[i],t1_y1[i]]);
    }

    signal t_y[n];
    t_y <== inv_halfNTT()(t_y_hat);

    signal t_y_e2[n];
    for (var i = 0; i < n; i++) {
        t_y_e2[i] <== FastAddMod(q)([t_y[i],e2[i]]);
    }

    signal m_compress[256];
    for (var i = 0; i < 256; i++) {
        m_compress[i] <== m[i] * 1665;
    }

    signal v[n];
    for (var i = 0; i < n; i++) {
        v[i] <== FastAddMod(q)([t_y_e2[i],m_compress[i]]);
    }

    signal compressed_u[2][n];
    signal compressed_v[n];

    for (var i = 0; i < n; i++) {
        compressed_u[0][i] <== ModSwitchInt(1<<du, q)(u[0][i]);
        compressed_u[1][i] <== ModSwitchInt(1<<du, q)(u[1][i]);
        compressed_v[i] <== ModSwitchInt(1<<dv, q)(v[i]);
    }

    // convert to bytes according to the spec to get c1 and c2
    signal c1[k*n*du]; // 256*2 entries in 2^10 amounts to 640 bytes
    signal c2[n*dv]; // 256*1 entries in 2^4 amounts to 128 bytes

    // convert compressed_u and compressed_v to bits using Num2Bits
    for (var i = 0; i < n; i++) {
        var out[du] = Num2Bits(du)(compressed_u[0][i]);
        for (var j = 0; j < du; j++) {
            c1[du*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[du] = Num2Bits(du)(compressed_u[1][i]);
        for (var j = 0; j < du; j++) {
            c1[du*n + du*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[dv] = Num2Bits(dv)(compressed_v[i]);
        for (var j = 0; j < dv; j++) {
            c2[dv*i + j] <== out[j];
        }
    }

    // output ciphertext
    signal output c[n*(k*du + dv)];
    for (var i = 0; i < k*n*du; i++) {
        c[i] <== c1[i];
    }
    
    for (var i = 0; i < n*dv; i++) {
        c[i + k*n*du] <== c2[i];
    }

    
    // // compute the SHA256 hash of the concatenation of c1 and c2
    // signal sha256_input[k*n*du + n*dv];
    // for (var i = 0; i < k*n*du; i++) {
    //     sha256_input[i] <== compressed_u_bits[i];
    // }
    // for (var i = 0; i < n*dv; i++) {
    //     sha256_input[k*n*du + i] <== compressed_v_bits[i];
    // }

    // // convert to bytes
    // signal sha256_input_bytes[(k*n*du + n*dv)/8];
    // for (var i = 0; i < (k*n*du + n*dv)/8; i++) {
    //     sha256_input_bytes[i] <== Bits2Num(8)(
    //         [sha256_input[8*i], 
    //         sha256_input[8*i+1], 
    //         sha256_input[8*i+2], 
    //         sha256_input[8*i+3], 
    //         sha256_input[8*i+4], 
    //         sha256_input[8*i+5], 
    //         sha256_input[8*i+6], 
    //         sha256_input[8*i+7]]
    //     );
    // }

    // signal h[32] <== Sha256_hash_bytes_digest((k*n*du + n*dv)/8)(sha256_input_bytes);

    // signal output h0;
    // signal output h1;

    // var sum = 0;
    // for (var i = 0; i < 16; i++) {
    //     sum += h[i]*(1<<(8*i));
    // }
    // h0 <== sum;

    // sum = 0;
    // for (var i = 16; i < 32; i++) {
    //     sum += h[i]*(1<<(8*(i-16)));
    // }
    // h1 <== sum;
}