// Copyright Â© 2024 Kaleido, Inc.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

const { expect } = require('chai');
const { join } = require('path');
const { wasm: wasm_tester } = require('circom_tester');
const { bytesToBits, bitsToBytes } = require('../../lib/util');

describe('kpke_enc circuit tests', () => {
  let circuit;
  const m = [
    1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ];

  const randomness = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ];

  // this is the encrypted result from the message above, using the dummy randomness
  // and the built-in Kyber public key inside the circuit (lib/kyber/kyber.circom).
  // the corresponding private key and public key are in zkp/js/test/lib/util.js
  const hack = [
    29, 74, 172, 90, 204, 31, 193, 144, 86, 81, 85, 76, 114, 104, 37, 93, 35, 134, 13, 148, 128, 205, 59, 251, 60, 54, 252, 177, 132, 48, 205, 12, 144, 189, 188, 10, 254, 2, 15, 3, 45, 41, 197, 111,
    132, 135, 101, 120, 248, 78, 219, 162, 210, 185, 12, 8, 212, 194, 152, 31, 139, 63, 251, 31, 124, 12, 97, 143, 95, 57, 242, 125, 66, 39, 153, 82, 41, 87, 227, 135, 70, 118, 234, 82, 143, 166, 156,
    180, 73, 76, 234, 129, 242, 26, 120, 215, 212, 87, 254, 119, 241, 144, 167, 189, 55, 49, 98, 105, 126, 12, 199, 7, 72, 134, 213, 120, 204, 223, 209, 200, 63, 13, 234, 215, 199, 79, 196, 94, 121,
    50, 190, 197, 116, 143, 33, 18, 247, 38, 6, 189, 125, 161, 91, 240, 141, 177, 170, 200, 51, 140, 53, 137, 169, 95, 63, 190, 107, 1, 238, 203, 125, 69, 190, 65, 169, 139, 122, 218, 89, 73, 100, 41,
    134, 3, 233, 47, 49, 245, 181, 220, 47, 15, 105, 117, 133, 89, 91, 232, 189, 0, 218, 12, 141, 86, 96, 130, 108, 239, 60, 160, 117, 137, 244, 73, 158, 124, 101, 71, 29, 99, 86, 179, 134, 55, 255,
    154, 62, 34, 187, 200, 164, 21, 90, 39, 157, 249, 240, 127, 52, 63, 61, 93, 50, 255, 223, 225, 1, 202, 34, 115, 203, 34, 167, 192, 208, 139, 235, 160, 115, 118, 151, 42, 29, 46, 108, 141, 195, 86,
    148, 176, 229, 115, 252, 253, 254, 9, 178, 53, 174, 0, 94, 29, 135, 128, 104, 55, 129, 159, 142, 23, 101, 135, 251, 99, 79, 20, 121, 144, 225, 206, 203, 205, 54, 177, 99, 243, 121, 122, 235, 198,
    188, 107, 255, 119, 143, 140, 22, 198, 176, 186, 67, 22, 199, 34, 58, 61, 150, 0, 168, 144, 169, 153, 223, 222, 179, 140, 251, 103, 240, 189, 63, 209, 102, 55, 11, 201, 30, 167, 223, 107, 128,
    161, 183, 118, 222, 48, 13, 116, 41, 199, 202, 124, 210, 14, 21, 176, 202, 120, 164, 13, 160, 42, 205, 7, 105, 25, 192, 228, 111, 148, 134, 127, 3, 239, 240, 108, 75, 178, 11, 8, 247, 220, 68,
    244, 5, 35, 228, 67, 170, 154, 196, 223, 164, 197, 187, 240, 253, 219, 147, 124, 153, 186, 56, 229, 125, 37, 233, 216, 163, 31, 97, 185, 97, 54, 250, 254, 191, 154, 123, 25, 76, 114, 78, 146, 34,
    65, 93, 138, 43, 249, 11, 214, 112, 218, 105, 88, 174, 76, 83, 158, 158, 72, 12, 119, 174, 172, 222, 40, 203, 167, 125, 163, 88, 26, 117, 46, 215, 218, 151, 135, 83, 43, 84, 119, 16, 185, 118,
    151, 8, 93, 227, 103, 53, 197, 95, 107, 22, 82, 193, 215, 83, 162, 187, 38, 198, 179, 121, 170, 120, 253, 226, 184, 66, 87, 18, 239, 157, 42, 152, 36, 140, 200, 94, 32, 222, 38, 159, 134, 147,
    202, 10, 184, 13, 47, 62, 5, 187, 175, 150, 184, 154, 127, 231, 72, 47, 129, 251, 217, 217, 145, 159, 86, 46, 47, 115, 232, 108, 33, 168, 38, 244, 94, 82, 139, 71, 16, 59, 117, 108, 29, 109, 232,
    244, 102, 222, 169, 229, 200, 63, 130, 78, 32, 217, 241, 8, 194, 216, 251, 66, 243, 44, 120, 239, 223, 252, 137, 201, 105, 217, 74, 233, 105, 169, 71, 143, 86, 192, 56, 147, 133, 3, 255, 142, 131,
    82, 249, 15, 209, 72, 159, 233, 30, 62, 71, 202, 61, 43, 52, 245, 211, 175, 139, 157, 81, 169, 80, 117, 176, 184, 229, 151, 187, 123, 107, 240, 224, 157, 190, 137, 44, 36, 1, 96, 57, 100, 186,
    251, 125, 106, 56, 2, 66, 117, 45, 92, 162, 73, 180, 153, 116, 130, 61, 126, 118, 194, 145, 128, 96, 119, 232, 173, 66, 217, 162, 224, 36, 96, 21, 28, 91, 62, 99, 232, 202, 98, 213, 95, 237, 235,
    81, 215, 73, 93, 14, 103, 130, 205, 224, 207, 46, 219, 236, 226, 42, 165, 214, 7, 106, 194, 36, 94, 11, 157, 168, 140, 149, 222, 161, 8, 180, 241, 111, 165, 122, 86, 154, 221, 254, 55, 188, 204,
    35, 104, 7, 171, 26, 47, 14, 159, 124, 147, 132, 148, 81, 129, 100, 181, 251, 80, 94, 93, 50, 186, 225, 39, 198, 24, 14, 45, 84, 171, 194, 139, 46, 86, 199, 81, 158, 18, 82, 83, 16, 194, 168, 87,
    50, 164, 109,
  ];

  before(async function () {
    this.timeout(60000);
    circuit = await wasm_tester(join(__dirname, '../circuits/kpke_enc.circom'));
  });

  it('should generate the right 768 bytes', async () => {
    const circuitInputs = {
      randomness,
      m,
    };
    const witness = await circuit.calculateWitness(circuitInputs);
    const array = witness.slice(1, 6145);
    const bytes = bitsToBytes(array.map((x) => Number(x)));
    expect(bytes.slice(0, 738)).to.deep.equal(hack.slice(0, 738));
    expect(bytes).to.deep.equal(hack);
  }).timeout(60000);
});
