// Copyright Â© 2024 Kaleido, Inc.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

const { expect } = require('chai');
const { join } = require('path');
const { wasm: wasm_tester } = require('circom_tester');
const { bytesToBits, bitsToBytes } = require('../../lib/util');

describe('kpke_enc circuit tests', () => {
  let circuit;
  const m = [
    1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ];

  // dummy randomness. keep this as is so that the circuit will generate the same
  // ciphertext as the one listed below. it's used as a tool to find the index of the
  // ciphertext in the witness array. For real world usage, this should be replaced with
  // a random number generated by a proper random number generator.
  const randomness = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ];

  // this is the encrypted result from the message above, using the dummy randomness
  // and the built-in Kyber public key inside the circuit (lib/kyber/kyber.circom).
  // the corresponding private key and public key are in zkp/js/test/lib/util.js
  const hack = [
    153, 180, 68, 235, 189, 233, 191, 4, 236, 89, 22, 35, 178, 239, 102, 163, 71, 123, 55, 19, 165, 82, 197, 168, 222, 159, 54, 198, 122, 202, 46, 61, 71, 249, 202, 155, 165, 186, 117, 41, 235, 141,
    35, 149, 53, 129, 42, 95, 212, 128, 192, 80, 112, 120, 127, 192, 205, 189, 251, 33, 173, 173, 209, 111, 0, 208, 195, 74, 118, 98, 48, 178, 40, 203, 127, 185, 133, 93, 106, 112, 154, 50, 56, 184,
    51, 20, 48, 2, 153, 106, 230, 56, 31, 252, 43, 23, 133, 140, 101, 183, 92, 250, 234, 28, 192, 208, 54, 250, 254, 120, 214, 74, 140, 53, 236, 105, 36, 182, 61, 100, 161, 226, 69, 83, 148, 134, 252,
    102, 226, 97, 203, 135, 10, 211, 251, 52, 154, 236, 218, 31, 236, 237, 252, 36, 25, 28, 150, 249, 52, 121, 152, 78, 9, 180, 23, 211, 126, 133, 153, 69, 197, 208, 190, 241, 118, 207, 183, 27, 127,
    51, 78, 77, 203, 153, 57, 21, 165, 163, 218, 41, 72, 219, 42, 130, 246, 112, 178, 196, 125, 46, 249, 103, 12, 28, 209, 111, 134, 22, 178, 180, 248, 88, 239, 238, 183, 191, 191, 235, 219, 239, 102,
    91, 90, 37, 218, 170, 234, 76, 91, 208, 38, 23, 74, 215, 14, 49, 149, 60, 145, 150, 3, 11, 251, 182, 73, 231, 14, 95, 217, 195, 182, 171, 2, 171, 19, 234, 75, 157, 205, 141, 181, 171, 227, 213,
    212, 44, 159, 98, 183, 226, 99, 144, 219, 130, 92, 110, 65, 184, 4, 2, 228, 3, 159, 193, 180, 197, 79, 248, 55, 139, 73, 238, 189, 48, 102, 251, 155, 199, 19, 14, 205, 136, 186, 253, 214, 230,
    253, 171, 217, 157, 23, 191, 73, 242, 132, 144, 134, 38, 255, 202, 79, 191, 124, 17, 103, 7, 55, 166, 5, 16, 82, 103, 169, 250, 141, 231, 235, 218, 185, 26, 125, 37, 95, 68, 72, 248, 78, 214, 49,
    88, 204, 17, 106, 221, 149, 143, 225, 254, 230, 120, 5, 166, 34, 200, 9, 60, 204, 9, 72, 205, 85, 231, 104, 186, 17, 172, 183, 67, 222, 23, 184, 112, 235, 253, 54, 150, 70, 42, 73, 68, 233, 174,
    108, 200, 42, 240, 108, 88, 54, 31, 217, 176, 29, 139, 231, 201, 132, 118, 104, 205, 47, 226, 184, 119, 199, 152, 49, 164, 123, 255, 16, 176, 83, 10, 140, 215, 228, 222, 202, 64, 88, 213, 123,
    106, 246, 53, 208, 42, 2, 43, 80, 203, 8, 155, 12, 216, 15, 221, 82, 20, 137, 22, 99, 66, 254, 146, 238, 82, 139, 25, 202, 33, 89, 156, 30, 48, 226, 103, 130, 148, 197, 126, 23, 131, 211, 75, 155,
    62, 231, 73, 32, 151, 196, 231, 226, 0, 249, 180, 140, 111, 18, 4, 60, 240, 76, 199, 81, 248, 84, 10, 117, 15, 191, 189, 209, 163, 146, 37, 185, 128, 54, 214, 175, 96, 215, 150, 138, 140, 228,
    102, 60, 133, 11, 185, 130, 110, 160, 121, 197, 129, 57, 150, 43, 222, 191, 64, 80, 107, 122, 33, 132, 67, 85, 141, 97, 124, 82, 173, 216, 224, 102, 220, 210, 24, 51, 192, 167, 135, 19, 212, 218,
    170, 74, 105, 104, 58, 237, 203, 181, 197, 77, 23, 92, 210, 143, 195, 129, 37, 205, 61, 98, 61, 112, 36, 245, 192, 225, 83, 81, 159, 134, 235, 86, 221, 172, 191, 213, 5, 131, 183, 118, 196, 78,
    206, 255, 9, 32, 58, 10, 189, 63, 95, 45, 85, 106, 74, 115, 51, 112, 123, 59, 45, 148, 13, 237, 84, 223, 249, 210, 176, 16, 228, 207, 248, 180, 91, 210, 71, 150, 167, 205, 123, 140, 39, 66, 3,
    110, 249, 38, 86, 41, 181, 163, 96, 211, 181, 98, 58, 133, 136, 250, 23, 117, 4, 207, 219, 168, 118, 85, 200, 123, 30, 143, 56, 117, 197, 242, 205, 130, 45, 200, 77, 51, 56, 31, 41, 151, 118, 118,
    162, 204, 65, 112, 243, 109, 142, 224, 81, 250, 103, 25, 91, 9, 189, 105, 23, 75, 95, 167, 149, 49, 103, 76, 105, 74, 67, 75, 3, 43, 103, 30, 157, 71, 34, 103, 136, 198, 229, 206, 182, 11, 255,
    246, 247, 16, 221, 142, 40, 137, 89, 63, 23, 151, 111, 31, 74, 70, 38, 210, 240, 18, 209, 62, 111, 84, 203, 151, 195, 212, 18, 203, 83, 2, 98, 120, 73, 251, 3, 220, 241, 162, 8, 76, 55, 163, 201,
    118, 42,
  ];

  before(async function () {
    this.timeout(60000);
    circuit = await wasm_tester(join(__dirname, '../circuits/kpke_enc.circom'));
  });

  it('should generate the right 768 bytes', async () => {
    const circuitInputs = {
      randomness,
      m,
    };
    const witness = await circuit.calculateWitness(circuitInputs);
    const array = witness.slice(1, 6145);
    console.log('array', array);
    const bytes = bitsToBytes(array.map((x) => Number(x)));
    expect(bytes).to.deep.equal(hack);
  });
});

const m1 = [
  1665, 1665, 0, 1665, 0, 1665, 1665, 0, 1665, 0, 0, 1665, 1665, 1665, 1665, 0, 0, 1665, 0, 0, 0, 1665, 1665, 0, 1665, 0, 1665, 0, 0, 1665, 1665, 0, 0, 1665, 0, 0, 1665, 1665, 1665, 0, 0, 0, 0, 0, 0,
  1665, 0, 0, 1665, 0, 0, 1665, 0, 1665, 1665, 0, 1665, 1665, 0, 0, 1665, 1665, 1665, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 1665, 1665, 0, 0, 0, 1665, 1665, 0, 1665, 1665, 1665, 1665, 0, 1665, 1665, 0, 1665,
  1665, 1665, 1665, 0, 1665, 1665, 0, 0, 0, 1665, 1665, 0, 1665, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

// dummy randomness. keep this as is so that the circuit will generate the same
// ciphertext as the one listed below. it's used as a tool to find the index of the
// ciphertext in the witness array. For real world usage, this should be replaced with
// a random number generated by a proper random number generator.
const randomness1 = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

// this is the encrypted result from the message above, using the dummy randomness
// and the built-in Kyber public key inside the circuit (lib/kyber/kyber.circom).
// the corresponding private key and public key are in zkp/js/test/lib/util.js
const hack1 = [
  29, 74, 172, 90, 204, 31, 193, 144, 86, 81, 85, 76, 114, 104, 37, 93, 35, 134, 13, 148, 128, 205, 59, 251, 60, 54, 252, 177, 132, 48, 205, 12, 144, 189, 188, 10, 254, 2, 15, 3, 45, 41, 197, 111,
  132, 135, 101, 120, 248, 78, 219, 162, 210, 185, 12, 8, 212, 194, 152, 31, 139, 63, 251, 31, 124, 12, 97, 143, 95, 57, 242, 125, 66, 39, 153, 82, 41, 87, 227, 135, 70, 118, 234, 82, 143, 166, 156,
  180, 73, 76, 234, 129, 242, 26, 120, 215, 212, 87, 254, 119, 241, 144, 167, 189, 55, 49, 98, 105, 126, 12, 199, 7, 72, 134, 213, 120, 204, 223, 209, 200, 63, 13, 234, 215, 199, 79, 196, 94, 121, 50,
  190, 197, 116, 143, 33, 18, 247, 38, 6, 189, 125, 161, 91, 240, 141, 177, 170, 200, 51, 140, 53, 137, 169, 95, 63, 190, 107, 1, 238, 203, 125, 69, 190, 65, 169, 139, 122, 218, 89, 73, 100, 41, 134,
  3, 233, 47, 49, 245, 181, 220, 47, 15, 105, 117, 133, 89, 91, 232, 189, 0, 218, 12, 141, 86, 96, 130, 108, 239, 60, 160, 117, 137, 244, 73, 158, 124, 101, 71, 29, 99, 86, 179, 134, 55, 255, 154, 62,
  34, 187, 200, 164, 21, 90, 39, 157, 249, 240, 127, 52, 63, 61, 93, 50, 255, 223, 225, 1, 202, 34, 115, 203, 34, 167, 192, 208, 139, 235, 160, 115, 118, 151, 42, 29, 46, 108, 141, 195, 86, 148, 176,
  229, 115, 252, 253, 254, 9, 178, 53, 174, 0, 94, 29, 135, 128, 104, 55, 129, 159, 142, 23, 101, 135, 251, 99, 79, 20, 121, 144, 225, 206, 203, 205, 54, 177, 99, 243, 121, 122, 235, 198, 188, 107,
  255, 119, 143, 140, 22, 198, 176, 186, 67, 22, 199, 34, 58, 61, 150, 0, 168, 144, 169, 153, 223, 222, 179, 140, 251, 103, 240, 189, 63, 209, 102, 55, 11, 201, 30, 167, 223, 107, 128, 161, 183, 118,
  222, 48, 13, 116, 41, 199, 202, 124, 210, 14, 21, 176, 202, 120, 164, 13, 160, 42, 205, 7, 105, 25, 192, 228, 111, 148, 134, 127, 3, 239, 240, 108, 75, 178, 11, 8, 247, 220, 68, 244, 5, 35, 228, 67,
  170, 154, 196, 223, 164, 197, 187, 240, 253, 219, 147, 124, 153, 186, 56, 229, 125, 37, 233, 216, 163, 31, 97, 185, 97, 54, 250, 254, 191, 154, 123, 25, 76, 114, 78, 146, 34, 65, 93, 138, 43, 249,
  11, 214, 112, 218, 105, 88, 174, 76, 83, 158, 158, 72, 12, 119, 174, 172, 222, 40, 203, 167, 125, 163, 88, 26, 117, 46, 215, 218, 151, 135, 83, 43, 84, 119, 16, 185, 118, 151, 8, 93, 227, 103, 53,
  197, 95, 107, 22, 82, 193, 215, 83, 162, 187, 38, 198, 179, 121, 170, 120, 253, 226, 184, 66, 87, 18, 239, 157, 42, 152, 36, 140, 200, 94, 32, 222, 38, 159, 134, 147, 202, 10, 184, 13, 47, 62, 5,
  187, 175, 150, 184, 154, 127, 231, 72, 47, 129, 251, 217, 217, 145, 159, 86, 46, 47, 115, 232, 108, 33, 168, 38, 244, 94, 82, 139, 71, 16, 59, 117, 108, 29, 109, 232, 244, 102, 222, 169, 229, 200,
  63, 130, 78, 32, 217, 241, 8, 194, 216, 251, 66, 243, 44, 120, 239, 223, 252, 137, 201, 105, 217, 74, 233, 105, 169, 71, 143, 86, 192, 56, 147, 133, 3, 255, 142, 131, 82, 249, 15, 209, 72, 159, 233,
  30, 62, 71, 202, 61, 43, 52, 245, 211, 175, 139, 157, 81, 169, 80, 117, 176, 184, 229, 151, 187, 123, 107, 240, 224, 157, 190, 137, 44, 36, 1, 96, 57, 100, 186, 251, 125, 106, 56, 2, 66, 117, 45,
  92, 162, 73, 180, 153, 116, 130, 61, 126, 118, 194, 145, 128, 96, 119, 232, 173, 66, 217, 162, 224, 36, 96, 21, 28, 91, 62, 99, 232, 202, 98, 213, 95, 237, 235, 81, 215, 73, 93, 14, 103, 130, 205,
  224, 207, 46, 219, 236, 226, 42, 165, 214, 7, 106, 194, 36, 94, 11, 157, 168, 140, 149, 222, 161, 8, 180, 241, 111, 165, 122, 86, 154, 221, 254, 55, 188, 204, 35, 104, 7, 171, 26, 47, 14, 159, 124,
  147, 132, 148, 81, 129, 100, 181, 251, 80, 94, 93, 50, 186, 225, 39, 198, 24, 14, 45, 84, 171, 194, 139, 46, 86, 199, 81, 158, 18, 82, 83, 16, 194, 168, 87, 50, 164, 109,
];
